#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\paragraph_spacing onehalf
\begin_inset Graphics
	filename notts logo.png
	lyxscale 25
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size largest
Intelligent Agent for Open Face Chinese Poker Web-Application
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
Submitted May 2015 in partial fulfilment of the conditions of the award
 of the degree BSc (Honours) Computer Science
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
Alastair Kerr
\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
axk02u
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
School of Computer Science and Information Technology
\end_layout

\begin_layout Standard
\align center

\size large
University of Nottingham
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
\color black
I hereby declare that this dissertation is all my own work, except as indicated
 in the text:
\end_layout

\begin_layout Standard
\align center

\size large
Signature 
\size default

\begin_inset CommandInset line
LatexCommand rule
width "20col%"
height "0.5pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Date 
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset

/
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset

/
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract

\shape italic
Artificial Intelligence (AI)
\shape default
 is a crucial and high-interest area of research in the field of Computer
 Science, which has gained increased traction in recent decades due largely
 to the application of AI algorithms in games and the implications that
 development of AI in this area can have on other fields of study.
 Poker games provide a challenge to 
\shape italic
Intelligent Agents
\shape default
 because of elements of 
\shape italic
hidden information
\shape default
 such as the cards other player's hold, as well as elements of randomness
 due to not knowing which cards are yet to be dealt.
 This differentiates Poker games from more traditional games such as Checkers,
 which is a 
\shape italic
zero-zum
\shape default
 
\shape italic
perfect information
\shape default
 game meaning that each player has the same complete knowledge of the game
 state at any stage.
 Therefore at each stage there is an 
\shape italic
optimal move
\shape default
 leading to a winning strategy, and in this manner these games can effectively
 be 
\shape italic
solved
\shape default
, and so when playing against a competent Agent for such a game it is impossible
 to win, only to draw.
 Many Poker games are different because of hidden elements due to unknown
 cards, in addition to variance because of the random nature of dealing
 shuffled cards, necessitating the use of more sophisticated algorithms
 in order for an Agent to perform competently versus intelligent opponents.
 While there has been lots of research into Intelligent Agents for traditional
 board games and variants of Poker such as 
\shape italic
Texas Hold'Em
\shape default
, lesser known variants such as the relatively new 
\shape italic
Open Face Chinese Poker
\shape default
 have not been explored to the same degree.
 Agents for Open Face Chinese Poker often suffer from poor performance due
 to reliance on simple 
\shape italic
algorithms
\shape default
 and methods such as 
\shape italic
Rule-Based Systems
\shape default
, which can lead to predictable or sub-optimal play.
 This dissertation considers the merits of various AI algorithms, and implements
 an Intelligent Agent for a bespoke Open Face Chinese Poker Web-Application,
 with discussions of the range of technologies used and methodologies employed
 in creating a functional platform for the application.
 It is advisable for readers unfamiliar with Poker, Computer Science or
 any of the italicised terms found throughout to familiarise themselves
 with the definitions found in the glossary section.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Introduction to Open Face Chinese Poker
\end_layout

\begin_layout Standard
Open Face Chinese Poker (commonly abbreviated to 
\shape italic
OFCP
\shape default
) is a perfect or imperfect information (depending on variant) card game
 with elements of randomness due to cards dealt.
 OFCP is a variant of 
\shape italic
Chinese Poker 
\shape default
where players take turns placing cards face-up into three distinct 
\shape italic
rows
\shape default
 (
\shape italic
bottom
\shape default
, 
\shape italic
middle
\shape default
 and 
\shape italic
top
\shape default
), creating the best possible 
\shape italic
poker hands
\shape default
 they can in order to score points from each other.
 Stronger hands score 
\shape italic
royalties
\shape default
 for extra points and royalty-scoring hands in higher rows score more points
 than an equivalent hand in a lower row.
 For example, a 
\shape italic
Royal House
\shape default
 gives +25 bonus points in bottom row, or +50 in the middle row.
 Players score +1 point for each row they win in addition to any royalties.
 In the case that a player wins all 3 rows they score a 
\shape italic
scoop
\shape default
 bonus which grants an additional point for each row, for a total of +6
 base points before royalties are calculated.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 2.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.1.1 – example layout of the board after a single round of Open Face
 Chinese Poker (screenshot from an early prototype of the application)
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Figure 1.1.1 shows the results and layout of the board after a game of OFCP.
 Player 1 wins bottom with a 
\shape italic
Two Pair
\shape default
 8s and 4s versus a 
\shape italic
Pair
\shape default
 of Qs for +1 point.
 Player 1 also wins middle row with Two Pair 7s and 2s versus Pair of 6s
 for +1 point.
 In top row Player 1 and the computer opponent both have a Pair of 3s, and
 so the third card is taken into account as the 
\shape italic
kicker
\shape default
, with Player 1 clinching the win for +1 point with a King kicker versus
 a 7.
 Further to the individual row scores, because Player 1 won every row they
 score an additional scoop bonus of +3.
\end_layout

\begin_layout Standard
One important caveat of the game is that hands in lower rows must be stronger
 than those on the rows above; if a player creates a top-heavy board then
 that player’s hand is invalid, which is known as 
\shape italic
fouling
\shape default
.
 When a player fouls their opponents automatically scoop them for +6 each
 (+1 for each row and +3 scoop bonus) in addition to any royalties, and
 any of the fouled player's royalties are disqualified.
 In the case that all players foul, no points are awarded.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 3.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.1.2 – Player 1 fouls and so their opponent wins an automatic scoop bonus
 plus royalties
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In the game shown in Fig 1.1.2 Player 1 has Pair of 10s in bottom, Pair of
 3s in middle and Pair of 6s in top.
 Because the top row contains a stronger poker hand than the row below it,
 the hand is invalid and the player fouls.
 On top of the +3 scoop bonus, the computer opponent wins further points
 for royalties because of its 
\shape italic
Flush
\shape default
 in bottom and 
\shape italic
Three of A Kind
\shape default
 in middle.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 1.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.1.3 – Player 1 wins a lot of bonus points from royalties for strong
 hands 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Fig 1.1.3 indicates how many points can be won from strong hands.
 Player 1 wins bottom row with 
\shape italic
Four of a Kind
\shape default
 8s versus the computer opponent’s Pair of Jacks.
 Player 1 receives +1 point for winning the row, with an additional +10
 points royalty for Four of a Kind on bottom.
 Player 1 also wins middle row with a 
\shape italic
Full House
\shape default
, Aces full of Deuces versus the computer opponent’s Pair of 9s, scoring
 +1 point for winning the row and an additional +12 royalty.
 Player 1 and Player 2 both have 
\shape italic
High Card
\shape default
 King in the top row, but the computer opponent wins the row because their
 kicker of 10 beats Player 1's 6 kicker.
 Player 2 wins +1 point for winning this row but the hand is not strong
 enough to score any additional royalties.
 The points each player wins are taken from their opponent, so the final
 score for Player 1 is 
\begin_inset Formula $-1+13+11=23$
\end_inset

, and the computer opponent’s score is the inverse of this, -23.
 
\end_layout

\begin_layout Subsection
Problem Description 
\end_layout

\begin_layout Standard
Introduce problem and motivation for study, outline purpose OFCP poker bots
 generally underperform vs human players.
 Rely on simple algorithms and make sub-optimal plays.
 Little work done on OFCP AI, more focus on other games/ more well-known
 variants of poker (Texas Hold’em).
 Poker is an interesting area of research for game theory as has many aspects
 other games (e.g.
 chess) do not – chance from unknown cards.
\end_layout

\begin_layout Standard
Imperfect information means that more sophisticated algorithms are generally
 necessary for optimal play.
 Or can traditional algorithms with suitable heuristics perform as well
 or better? 
\end_layout

\begin_layout Standard
Hidden information poses many challenges from an AI point of view.
 In many games, the number of states within an information set can be large:
 for example, there are 52! ~= 8x10
\begin_inset script superscript

\begin_layout Plain Layout
67
\end_layout

\end_inset

 possible orderings of a standard deck of cards, each of which may have
 a corresponding state in the initial information set of a card game.
 If states are represented in a game tree, this leads to a combinatorial
 explosion in branching factor.
 
\end_layout

\begin_layout Subsection
Aims and Objectives 
\end_layout

\begin_layout Standard
Specific objectives
\end_layout

\begin_layout Standard
1.
 Create a functional Open Face Chinese Poker Application – game environment
 
\end_layout

\begin_layout Standard
2.
 Create Intelligent Agent for application
\end_layout

\begin_layout Standard
3.
 AI must have a level of sophistication such that it performs well vs.
 humans and other AI
\end_layout

\begin_layout Standard
4.
 AI algorithms must be suitably optimised with tradeoffs between efficiency,
 space and time complexity so that it is responsive.
 E.g.
 AI calculates move in less than 5 seconds 
\end_layout

\begin_layout Subsection
Ethics
\end_layout

\begin_layout Standard
Gambling, bot vs humans playing for money? Or just playing for fun 
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
Game Theory 
\end_layout

\begin_layout Standard
Game theory – John von Neumann.
 Traditional Game Search: e.g.
 1928 neumann proposes minimax tree search.
 Minimax decision rules dictate that in a 2-player zero-sum perfect information
 game there exists strategies for each player that minimise his maximum
 losses (hence minimax) which must be based on considerations of all the
 adversary’s possible responses.
 The strategy which minimises a player’s maximum losses is called the optimal
 strategy.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Naïve minimax vs alpha-beta pruning: AB pruning eliminates branches of the
 search tree where a possibility has been found which is worse than a previously
 examined move, meaning this branch cannot possibly influence the final
 decision.
 These traditional methods work well for e.g.
 chess, checkers, but are generally insufficient for more complex games
 that cannot be ‘solved’ e.g.
 imperfect information games such as poker.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Checkers state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
20
\end_layout

\end_inset

 (relatively low complexity, weakly solved with traditional algorithms)
\end_layout

\begin_layout Standard
Chess state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
47
\end_layout

\end_inset

 (higher complexity, partially solved e.g.
 with retrograde algorithms.
 May be impossible to solve with current technology) 
\end_layout

\begin_layout Standard
Go state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
171
\end_layout

\end_inset

 (very high complexity, unlikely for strong AI to come out for many years)
\end_layout

\begin_layout Standard
1940s: Monte Carlo methods formalised.
 2006: Remi Coulom proposed Monte Carlo Tree Search – run random simulations
 and build search trees from the results.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
MCTS has quickly gained traction as a strong general purpose algorithm for
 AI in games due to its effective results with (if properly implemented)
 low space and time complexity.
 MCTS concentrates on analysing the most promising moves, basing the expansion
 of the search tree on random sampling of the search space.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The game tree in MCTS grows asymmetrically, concentrating on searching more
 promising branches.
 Because of this it achieves better results than classical algorithms in
 games with a high branching factor.
 One of the most enticing benefits of MCTS is that it requires no strategic
 or tactical knowledge about a problem domain other than end conditions
 and legal moves, making MCTS implementations flexible and applicable to
 a variety of problem domains with little modification.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“The basic MCTS algorithm is simplicity itself: a search tree is built,
 node by node, according to the outcomes of simulated playouts.
 The process can be broken down into the following steps: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename MCTS algorithm graphic.png
	lyxscale 85
	scale 85

\end_inset


\end_layout

\begin_layout Standard
\align center
-
\color blue
 http://www.cameronius.com/research/mcts/about/index.html
\color inherit
 
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Basic algorithm can be weak, but there are many enhancements e.g.
 Upper Confidence Bounds for Trees (UCT), used in 90% of MCTS applications.
 UCB formula: 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $v_{i}+C\times\sqrt{\frac{\ln N}{n_{i}}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“where vi is the estimated value of the node, ni is the number of the times
 the node has been visited and N is the total number of times that its parent
 has been visited.
 C is a tunable bias parameter.
 Exploitation vs Exploration The UCB formula provides a good balance between
 the exploitation of known rewards and the exploration of relatively unvisited
 nodes to encourage their exercise.
 Reward estimates are based on random simulations, so nodes must be visited
 a number of times before these estimates become reliable; MCTS estimates
 will typically be unreliable at the start of a search but converge to reliable
 estimates given sufficient time and perfect estimates given infinite time.”
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Improvements to MCTS? Light playouts – random moves.
 Heavy playouts utilise heuristics to influence choice of moves.
 “MCTS and UCT Kocsis and Szepervari (2006) first formalised a complete
 MCTS algorithm using UCB and dubbed it the Upper Confidence Bounds for
 Trees (UCT) method.
 This is the algorithm used in the vast majority of current MCTS implementations.
 UCT may be described as a special case of MCTS, that is: UCT = MCTS + UCB”
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“Previous work has adapted MCTS to games which, like Spades, involve hidden
 information.
 This has led to the development of the Information Set Monte Carlo Tree
 Search (ISMCTS) family of algorithms (Cowling, Powley, and Whitehouse 2012).
 ISMCTS achieves a higher win rate than a knowledge-based AI developed by
 AI Factory for the Chinese card game Dou Di Zhu, and also performs well
 in other domains.
 ISMCTS uses determinizations, randomisations of the current game state
 which correspond to guessing hidden information.
 Each determinization is a game state that could conceivably be the actual
 current state, given the AI player’s observations so far.”
\end_layout

\begin_layout Standard
-
\color blue
 http://www.aaai.org/ocs/index.php/AIIDE/AIIDE13/paper/viewFile/7369/7595 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
ISMTCS useful for games like traditional Texas Hold’Em poker where each
 player is privy to information that others are not – i.e.
 their own cards.
 ISMTCS can model various possible game states/ permutations of what other
 players could have – guessing other players cards based on previous information.
 Not needed for OFCP because all players have the same information – cards
 are placed face up.
 However, could come into play for custom variants of OFC, such as pineapple
 – e.g.
 to model which cards are unlikely to have appeared based on how they play;
 if a player has a king on bottom row but does not pair it in the next hand
 then it is almost certain that the discarded card is not a King.
 Information can be built in this way to influence determined probabilities
 of certain cards appearing and AI can act appropriately.
 
\end_layout

\begin_layout Subsection
Artificial Intelligence in Poker 
\end_layout

\begin_layout Standard
Pot limit poker solved.
 Not true for holdem.
 Where does OFC stand? Relatively low complexity for standard OFC, but other
 variants of OFC are much more complex e.g.
 Pineapple OFC.
\end_layout

\begin_layout Standard
That said, permutations for OFCP game state: deck of 52 cards, each player
 places 13 cards (26 total for a heads up game) 
\end_layout

\begin_layout Standard
52 choose 26 = 495,918,532,948,104 ( 4.9591853e+14 ) 
\end_layout

\begin_layout Standard
Methods e,g, database look ups impractical to implement due to space complexity
 of game.
 Need a method which has a suitable compromise between time and space complexity.
 Monte Carlo methods are perfect for this, especially considering the usage
 of heuristics which can optimise the algorithm e.g.
 UCT, pruning tree branches 
\end_layout

\begin_layout Standard

\color blue
http://scrambledeggsontoast.github.io/2014/06/26/artificial-intelligence-ofcp/
\color inherit
 - Haskell AI for OFC ‘Kachushi’.
 Carries out monte carlo simulations of rest of game to inform expected
 value for decisions.
\end_layout

\begin_layout Subsection
Hand Evaluation Algorithms 
\end_layout

\begin_layout Standard
Naïve – non-optimal and non-trivial to implement.
 Simple histogram algorithm can be used to rank high card, pair, two pair,
 trips, full house, quads, but needs extra steps to check flushes, straights,
 kickers etc.
 -> use this approach for bespoke 3 card evaluator for top row in OFC.
 Very low complexity, efficiency not as much a concern as with 5 card hands.
\end_layout

\begin_layout Standard
A faster, more efficient algorithm means more hands can be evaluated more
 quickly leading to higher responsiveness and more optimal play – e.g.
 able to evaluate more hands in deeper, broader searches.
 Using “kmanley”’s 5 card poker hand evaluator (handles all hands properly
 e.g with kickers etc, reasonable efficiency compared to other algorithms,
 understandable, performs better than other simple naive algorithms).
 Written in python so can be easily used in conjunction with my backend
 (cherrypy server)
\end_layout

\begin_layout Standard
More efficient poker hand evaluators are available, however generally written
 in much more efficient languages such as C - cannot be used in conjunction
 with pypy.
 
\end_layout

\begin_layout Section
Design and Implementation
\end_layout

\begin_layout Subsection
Approach
\end_layout

\begin_layout Standard
html css and javascript for website/ app.
 Javascript handles front end, sends POST ‘reqwest’s with game state to
 cherrypy server – backend – which validates the sent game state and then
 calls helper functions (python scripts) for hand evaluation, handling AI
 simulations etc.
 , updates the game state in the database, and returns appropriate response
 e.g.
 cards to be placed, scores at end of game
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
data flow diagram of a game of chinese poker
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
system flow diagram for application / system architecture diagram 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The design principle adhered to throughout the process of creating the applicati
on was Rapid Application Development using Evolutionary Prototyping, creating
 a functional prototype which was refined and updated to meet changing requireme
nts and to implement new features.
 This approach was perfect for the needs of the project as it allowed for
 lots of flexibility and meant that emphasis could be put on development,
 creating a functional or semi-functional application at each stage which
 implemented some of the planned features, meeting some of the requirements
 and being ready to build upon and develop further into a new version which
 improves upon itself.
 This flexible style is naturally advantageous over a more traditional approach
 such as the Waterfall model which involves rigorously defining specifications
 from the start, which means making changes down the line becomes increasingly
 difficult and costly; such a style of development was appropriated from
 other industries before more suitable methodologies of software development
 were formalised.
 
\end_layout

\begin_layout Standard

\color white
.
 
\end_layout

\begin_layout Standard
1.
 OFCP application must implement appropriate rules.
 E.g.
 correct scoring system 
\end_layout

\begin_layout Standard
2.
 AI must have a level of sophistication such that it performs well vs humans
 and other AI 
\end_layout

\begin_layout Standard
3.
 AI algorithms must be suitably optimised
\end_layout

\begin_layout Standard
4.
 Website should have minimal downtime 
\end_layout

\begin_layout Standard
5.
 Website should be responsive and quick to load
\end_layout

\begin_layout Standard
6.
 Footprint of application must be low – if it were to be scaled up e.g.
 hundreds of concurrent users, server has to be able to handle this 
\end_layout

\begin_layout Subsection
Technologies 
\end_layout

\begin_layout Standard
Website and application created with HTML, CSS and Javascript with pages
 created dynamically with jinja2 templates.
\end_layout

\begin_layout Standard
Python backend handling dealing of cards, processing game state, AI's card
 placements and scoring of game board 
\end_layout

\begin_layout Standard
Pure python networking with cherrypy, which is efficient and can handle
 up to 1000 concurrent requests which is more than enough for the requirements
 of this project.
 
\end_layout

\begin_layout Standard
Site hosted using DigitialOcean VPS running Ubuntu 14.04 with nginx reverse-proxy.
\begin_inset CommandInset citation
LatexCommand cite
key "key-6"

\end_inset


\end_layout

\begin_layout Standard
Game states stored in database using mongodb (which is a document-oriented
 database as opposed to a traditional relational database which decreases
 development time and reduces complexity as there is no need to constantly
 transform the data when reading from the database into the python backend.
 Mongodb is scalable and high performance, and allows for flexible data
 structures for example with optional values being handled trivially, with
 the databases getting type information from the data itself meaning they
 can map easily into program objects, which is specifically advantageous
 in this application because of the use of dictionaries to store the game
 state.
 The flexibility and ease of deployment of such a style of database makes
 their use well suited for web-applications such as this one) run in docker
 virtual environment.
 
\end_layout

\begin_layout Standard
Version control with github: OFCP-AI private repository.
 Use of version control is paramount as it allows for undesirable changes
 to be rolled back easily, and if something goes wrong there is always working
 versions available to roll back to.
 Using multiple branches (master and experimental) meant that a stable version
 could be maintained while new features were implemented safely on the experimen
tal branch without affecting or potentially breaking the master version.
 Also allows for 'releases' for different versions of the software e.g.
 legacy client-side only, current with feature-full self-contained application
 
\end_layout

\begin_layout Subsection
Implementation 
\end_layout

\begin_layout Standard

\color blue
http://www.alastairkerr.co.uk/ofc
\end_layout

\begin_layout Section
Evaluation
\end_layout

\begin_layout Subsection
Unit Tests 
\end_layout

\begin_layout Standard
Modular testing of code e.g.
 individual functions 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python sample error catching.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.1 - Sample code from function ‘reformat_hand_xyy_yx’ in helpers.py
 script: use of input validation and try except blocks to catch errors
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python test inputs.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.2 - Test inputs to ensure function works as intended
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python output.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.3 - Output – invalid hands are handled properly, throw exceptions/
 print usage messages rather than throwing errors 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Subsection
Performance of AI versus human players 
\end_layout

\begin_layout Standard
Alpha testing: playing individual games with participants vs AI Playing
 vs experienced players, new players – get an indication of AI’s comparative
 skill level 
\end_layout

\begin_layout Subsection
Performance of AI versus other AI
\end_layout

\begin_layout Standard
Pit this intelligent agent vs other AI and/or previous/ alternative versions
 of itself.
 E.g.
 performance of AI with MCTS vs AI using AB pruning/ minimax, MCTS vs totally
 random placement: if AI is working well should vastly outperform a naive
 AI.
 Visualisations of performance e.g.
 graphs, tables of win rates Database storing moves -> this would allow
 for analysis of individual rounds, games etc.
 
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Subsection
Aims and Objectives
\end_layout

\begin_layout Standard
To what extent were the aims met? Sophistication and performance of AI?
 Were all features implemented?
\end_layout

\begin_layout Standard
Performance of website: http://tools.pingdom.com/fpt/#!/cXxmxY/http://alastairkerr.
co.uk/ofc/play/5540d2e7b878ce06943c74f2/next 
\end_layout

\begin_layout Subsection
Reflection 
\end_layout

\begin_layout Standard
Reflection on project, decisions, performance etc.
\end_layout

\begin_layout Standard
Design - frontend is functional but could have been designed better from
 the start.
 e.g.
 originally hard-coding player's card image objects rather than dynamically
 creating them with javascript
\end_layout

\begin_layout Standard
Backend works well but if different technologies and languages were used
 could be more efficient - e.g.
 hand evaluators written in C using bitwise operators could evaluate millions
 of hands per second rather than hundreds of thousands - could shave off
 seconds of processing time which could either lead to increased responsiveness
 or allow for more games to be simulated by the AI making it more likely
 to find optimal solutions for hand placements.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The choice of a flexible software methodology worked well overall because
 of the evolving requirements and design choices, as well as the individual
 nature of the project.
 In comparison, in a large team of developers issues with this approach
 could arise from lacking a clear design focus and having limited control
 - a necessary trade-off that is an inevitable consequence of the increased
 flexibility this methodology enables.
 One important pitfall to avoid with Rapid Application Development is focusing
 too much on individual components without getting a clear view of the system's
 design, making minor changes without considering possibilities for an improved
 design structure.
 While there is generally a clear design phase before entering the initial
 implementation stage, there can be a tendency to omit a renewed design
 phase in subsequent implementation cycles leading to a lack of documentation
 which can have large consequences down the line; as Gerber et al.
 (2007) state in the analysis of one case study 
\begin_inset Quotes eld
\end_inset

...
 due to the fact that the design was not formally documented and reviewed,
 the discrepancy was only discovered after the implementation phase.
 This situation caused conflict between developers and analysts and in the
 end necessitated a redesign effort which put unnecessary pressure due to
 time constraints and limited resources on the whole development team
\begin_inset Quotes erd
\end_inset

.
 Design choices in early prototypes had a carry-on effect which meant that
 later down the line code refactoring was necessary in order to create a
 more coherent system structure, which potentially could have been avoided
 or reduced with a stricter design philosophy.
 
\end_layout

\begin_layout Standard
An apt example of this is seen in legacy prototypes of the application,
 which were client-side only.
 This was a choice that was made in order to quickly create a functional
 prototype, using JavaScript to simulate processes that would be handled
 elsewhere in the final application's architecture (such as dealing cards).
 This was useful because it resulted in a functional application which implement
ed some of the planned features, leading to a clearer understanding of the
 needs of the project, but had to be adapted later in order to create a
 more logical system structure which could meet the requirements, such as
 backend processing to handle the game states and calculate the Intelligent
 Agent's moves.
 
\end_layout

\begin_layout Subsection
Improvements
\end_layout

\begin_layout Standard
What can be done to improve the application/ AI in the future? 
\end_layout

\begin_layout Standard
Limitations: “With any method based on random simulation, it is inevitable
 that poor quality moves will be chosen with nonzero probability, due to
 a particularly lucky run of simulations making the move appear better than
 it is.
 “ - 
\color blue
http://www.aaai.org/ocs/index.php/AIIDE/AIIDE13/paper/viewFile/7369/7595
\color inherit
 page 5 
\end_layout

\begin_layout Standard
Due to the need for a compromise between finding the optimal solution and
 finishing the request in a reasonable amount of time the number of simulated
 games is limited and therefore it is possible that sub-optimal plays will
 be over-valued due to the element of randomness.
 
\end_layout

\begin_layout Standard
Improve frontend – make the app more visually appealing 
\end_layout

\begin_layout Standard
Multiplayer support for players vs players as well as players vs AI(s) or
 players vs players vs AI(s)
\end_layout

\begin_layout Standard
Add support for other variants of OFC such as pineapple - includes elements
 of hidden information as players choose to discard one card, the identity
 of which is known only to them.
 Will increase complexity of game requiring further modifications/ improvements
 to Agent, and would make any performance issues even more of an obstacle.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The Intelligent Agent generally favours optimal card placements, but because
 of the element of randomness in evaluating moves there is the potential
 for the AI to mistakenly over-value a sub-optimal move.
 As Whitehouse et al.
 (2013) state 
\begin_inset Quotes eld
\end_inset

With any method based on random simulation, it is inevitable that poor quality
 moves will be chosen with nonzero probability, due to a particularly lucky
 run of simulations making the move appear better than it is
\begin_inset Quotes erd
\end_inset

.
 This potential for inaccurate evaluation of a move's strength has an inverse
 relationship with the number of iterations of simulated games - as the
 number of iterations increase the result diverges to the optimal solution,
 meaning that with an infinite amount of simulations the probability of
 finding the best move is 1.
 The performance of the Intelligent Agent therefore could be improved with
 more processing power and/or a longer allocated time to simulate games,
 although it is important to note that there are diminishing returns with
 this strategy; doubling the iterations does not mean that the results will
 be twice as good.
\end_layout

\begin_layout Standard
This ties in with the choices made for the implementation and configuration
 of the Agent, specifically in regards to compromises between responsiveness
 and finding the best move - in the specified requirements the Agent was
 intended to take no more than 5 seconds to calculate its turn, and the
 application satisfies this requirement.
 However, increasing the iterations would make satisfying this criteria
 infeasible without increased processing power or through further optimisation.
 This could be achieved in various ways, for example by rewriting the applicatio
n in a more efficient language such as C, or by implementing more advanced
 heuristics to reduce the complexity of the calculations, or using a different
 algorithm such as a more advanced implementation of the Monte Carlo method
 like Monte Carlo Tree Search with UCT, as discussed in Section 2 of this
 dissertation.
 Overall the implementation of the Intelligent Agent satisfies the specified
 requirements and works well for its intended purpose in the scope of this
 application, but for larger scale implementations would likely need to
 make use of one or more of these changes in order to achieve increased
 scalability, for example for use in a commercial application with thousands
 of concurrent users.
 
\end_layout

\begin_layout Section
Glossary of Terms 
\end_layout

\begin_layout Subsection
Poker Variants
\end_layout

\begin_layout Itemize

\series bold
Texas Hold'Em
\series default
 is a popular variant of Poker where each player receives 2 cards for use
 individually in combination with 5 community cards shared between all players,
 with players combining any of their available cards in order to create
 the strongest standard poker hand possible
\end_layout

\begin_layout Itemize

\series bold
Chinese Poker
\series default
 is a variant of poker where players are dealt 13 cards which they must
 arrange into three rows, placed face down.
 Players announce in clockwise order whether or not they wish to play their
 hand, and then all players announce their royalties and show their cards
\end_layout

\begin_layout Itemize

\series bold
Open Face Chinese Poker
\series default
 is a variant of Chinese Poker where players act in clockwise order, receiving
 first 5 cards which are placed face up and then one card at a time until
 all players have placed 13 cards.
 Players must create valid hands consisting of stronger poker hands in lower
 rows, and score points from their opponents for winning corresponding rows.
 Additional points known as royalties can be won for particularly strong
 hands
\end_layout

\begin_layout Itemize

\series bold
Pineapple OFC 
\series default
is a sub-variant of Open Face Chinese Poker, following the same basic rules
 as the standard variant with the distinction that in subsequent rounds
 after the initial 5 card placements, players receive 3 cards and choose
 to place 2 and discard 1.
 This introduces higher action play as well as elements of hidden information
 as other players are unaware of which cards their opponents have discarded,
 although there is potential to infer this information based off of how
 the player acts 
\end_layout

\begin_layout Subsection
Poker Hands Guide (Weakest to Strongest)
\end_layout

\begin_layout Itemize

\series bold
High Card
\series default
 is the lowest ranking poker hand and is the default when no other hands
 have been made.
 An example High Card is the Jack of Spades, which would beat any hand comprised
 of a High Card ranked 10 or less, but would lose to a High Card Queen,
 King, Ace, or any stronger poker hand.
\end_layout

\begin_layout Itemize

\series bold
Pair
\series default
 is the second weakest poker hand.
 A player has a pair when they have two cards of the same rank, for example
 the 7 of Hearts and 7 and Clubs would form a Pair of 7s.
 
\end_layout

\begin_layout Itemize

\series bold
Two Pair
\series default
 is the next strongest hand rank, consisting of two different pairs.
 For example having the 5 of Spades, 5 of Diamonds, 9 of Hearts and 9 of
 Clubs would form Two Pair 9s and 5s.
 When comparing a Two Pair to another Two Pair the highest ranked pair takes
 precedence.
\end_layout

\begin_layout Itemize

\series bold
Three of a Kind
\series default
 or a 
\series bold
Set
\series default
 beats Two Pairs, Pairs and High Cards and consists of three same-ranked
 cards, such as the Ace of Spades, Ace of Diamonds and Ace of Hearts, which
 would form Three of a Kind Aces
\end_layout

\begin_layout Itemize

\series bold
Straight
\series default
 is a hand where a player has 5 sequential cards, such as 4 of Diamonds,
 5 of Hearts, 6 of Hearts, 7 of Clubs, 8 of Spades, which would form a Straight
 8 High.
 The lowest ranked straight spans Ace to 5 and the highest ranked straight
 spans 10 to Ace.
 It is important to note that straights do not wrap around; you cannot form
 a straight such as Queen, King, Ace, Deuce, 3.
 
\end_layout

\begin_layout Itemize

\series bold
Flush
\series default
 is one of the stronger poker hands, consisting of cards which are all the
 same suit.
 For example the 6 of Hearts, 9 of Hearts, Jack of Hearts, Queen of Hearts
 and King of Hearts would form a King High Flush.
\end_layout

\begin_layout Itemize

\series bold
Full House
\series default
, sometimes known as a 
\series bold
Boat
\series default
, is one of the strongest poker hands available, and comprises both a Three
 of a Kind and an additional Pair.
 For example Three of a Kind Tens with Pair of Jacks would combine to form
 a Full House, Tens full of Jacks.
 
\end_layout

\begin_layout Itemize

\series bold
Four of a Kind
\series default
 is a hand obtained when a player has every instance of a particular card
 rank, such as King of Hearts, King of Diamonds, King of Clubs and King
 of Spades which would form Four of a Kind Kings.
 
\end_layout

\begin_layout Itemize

\series bold
Straight Flush
\series default
 is effectively the strongest poker hand possible, consisting of 5 sequential
 same suited cards.
 For example the 4 of Spades, 5 of Spades, 6 of Spades, 7 of Spades and
 8 of Spades would form a Straight Flush 8 High.
\end_layout

\begin_layout Itemize

\series bold
Royal Flush
\series default
 is a special instance of a Straight Flush where a player has the 10, Jack,
 Queen, King and Ace of a particular suit.
 Royal Flushes are particularly rare; in Texas Hold'Em the probability of
 getting a Royal Flush is roughly 0.000154%.
 
\end_layout

\begin_layout Subsection
Open Face Chinese Poker Terminology 
\end_layout

\begin_layout Itemize
A 
\series bold
row
\series default
 is a set structure for placing cards.
 At the end of a game when scoring occurs poker hands in each player's rows
 are compared to the opposing player's hand in their corresponding row.
 There are three different rows as described below
\end_layout

\begin_layout Itemize

\series bold
Bottom Row
\series default
 or 
\series bold
Back Hand
\series default
 is the foundation row, and consists of 5 cards.
 Out of all three rows this must have the strongest poker hand or the player
 fouls.
 
\end_layout

\begin_layout Itemize

\series bold
Middle Row 
\series default
or 
\series bold
Middle Hand 
\series default
also consists of 5 cards.
 It must have a weaker hand than Bottom Row in order for the player's hand
 to be valid.
 
\end_layout

\begin_layout Itemize

\series bold
Top Row
\series default
 or 
\series bold
Front Hand
\series default
 consists of 3 cards, meaning the best possible hand here is a Three of
 a Kind (in most variant 3 card straights and flushes do not count).
 Top Row must have a weaker hand than both middle and bottom row.
 
\end_layout

\begin_layout Itemize

\series bold
Scoop
\series default
 is a bonus awarded to a player when they win all 3 rows against an opponent.
 On top of the standard +1 point per row won, the player is granted an additiona
l bonus of +3 points which is also taken from their opponent.
\end_layout

\begin_layout Itemize

\series bold
Fouling
\series default
 occurs when a player plays an invalid hand, for example by putting a stronger
 hand in their middle row than their bottom row.
 When a player fouls any of their royalties are null, and their opponent
 is automatically awarded a scoop bonus so long as their hand is valid.
 
\end_layout

\begin_layout Itemize

\series bold
Kicker
\series default
 is the term used to describe the next card taken into account when comparing
 two otherwise equal hands.
 For example, if both Player 1 and Player 2 have a Pair of 8s then the rest
 of their cards would be considered, and whichever player has the highest
 rank wins.
 If both players kicker is equivalent then the next highest kicker will
 come into play and so on.
 
\end_layout

\begin_layout Itemize

\series bold
Royalties
\series default
 are bonus points awarded to player's for particularly strong hands.
 Just like any other points a player wins, they are taken directly from
 opposing players.
 Hands in higher rows score higher royalties than equivalent hands in lower
 rows.
 For example, a Full House in bottom row is worth 6 points in bottom or
 12 points in middle.
 Another example is that a Three of a Kind in bottom row scores no royalty,
 but gets 2 bonus points in middle and between 10 and 22 points in top depending
 on the rank (Three of a Kind Deuces scores 10 points up to Three of a Kind
 Aces with 22 points).
 See here for a full list of royalties: http://www.wsop.com/2013/Open_Face_Chinese
_Structure_Sheet.pdf 
\end_layout

\begin_layout Subsection
Computer Science and Mathematical Terminology 
\end_layout

\begin_layout Itemize

\series bold
Artificial Intelligence 
\series default
is a field of study in Computer Science which focuses on simulating intelligent
 behaviour in computers.
\end_layout

\begin_layout Itemize
An 
\series bold
Intelligent Agent
\series default
 is an autonomous software entity that perceives and acts upon its environment,
 performing reasoning in order to solve problems and determine actions,
 exhibiting goal-oriented behaviour.
\end_layout

\begin_layout Itemize

\series bold
Algorithms
\series default
 are step-by-step instructions describing a set of operations to be performed
\end_layout

\begin_layout Itemize

\series bold
Game Theory
\series default
 is a branch of mathematics focused on determining optimal strategies and
 decisions in competitive situations
\end_layout

\begin_layout Itemize

\series bold
Solved Games
\series default
 are games where the outcome (Win/Loss/Draw) can be predicted at any stage
 assuming optimal play
\end_layout

\begin_layout Itemize
The 
\series bold
Optimal Move
\series default
 or 
\series bold
Optimal Strategy
\series default
 is the move or strategy that will lead to the most favourable outcome for
 an Agent 
\end_layout

\begin_layout Itemize
A 
\series bold
Zero-Sum Game
\series default
 is a game in which a player's gains are losses are balanced by another
 player's gains or losses.
 Open Face Chinese Poker is an example of a Zero-Sum Game as a player's
 gains are directly taken from their opponent.
 
\end_layout

\begin_layout Itemize

\series bold
Hidden Information
\series default
 is relevant information available to one or more agents but not others.
 For example in a Poker game, the cards that players individually possess
 or have discarded are known to them but are hidden from other players.
 
\end_layout

\begin_layout Itemize

\series bold
Perfect Information Games
\series default
 are games where at any stage all relevant information is available to an
 agent in order to inform its decision.
 The inverse of this is an 
\series bold
Imperfect Information Game
\series default
 where certain information or prior actions remain unknown.
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Itemize
Browne, C.
 Et al, 2012, A Survey of Monte Carlo Tree Search Methods, IEEE TRANSACTIONS
 ON COMPUTATIONAL INTELLIGENCE AND AI IN GAMES, VOL.
 4, NO.
 1.
\end_layout

\begin_layout Itemize
Cowling, P.
 Et al, 2012, Information Set Monte Carlo Tree Search, IEEE TRANSACTIONS
 ON COMPUTATIONAL INTELLIGENCE AND AI IN GAMES, VOL.
 4, NO.
 2.
\end_layout

\begin_layout Itemize
Whitehouse, D.
 Et al, 2013, Integrating Monte Carlo Tree Search with Knowledge-Based Methods
 to Create Engaging Play in a Commercial Mobile Game, University of York,
 p5
\end_layout

\begin_layout Itemize
Özcan, E.
 and Hulagu, B., 2004, A Simple Intelligent Agent for Playing Abalone Game:
 ABLA, Proc.
 of the 13th Turkish Symposium on Artificial Intelligence and Neural Networks,
 pp.
 281-290
\end_layout

\begin_layout Itemize

\color blue
http://scrambledeggsontoast.github.io/2014/06/26/artificial-intelligence-ofcp/
\color inherit
 - Intelligent Agent ‘Kachushi’ for Open Face Chinese Poker using Monte
 Carlo methods, implemented in Haskell, accessed 2015
\end_layout

\begin_layout Itemize

\color blue
https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applica
tions-using-a-cherrypy-web-server-behind-nginx 
\end_layout

\begin_layout Itemize
Gerber, A.
 Et al, 2007, Implications of Rapid Development Methodologies, CSITEd 2007,
 p242-243
\end_layout

\end_body
\end_document
