#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\paragraph_spacing onehalf
\begin_inset Graphics
	filename notts logo.png
	lyxscale 25
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size largest
Intelligent Agent for Open Face Chinese Poker Web-Application
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
Submitted May 2015 in partial fulfilment of the conditions of the award
 of the degree BSc (Honours) Computer Science
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
Alastair Kerr
\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
axk02u
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
School of Computer Science and Information Technology
\end_layout

\begin_layout Standard
\align center

\size large
University of Nottingham
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\size large
\color black
I hereby declare that this dissertation is all my own work, except as indicated
 in the text:
\end_layout

\begin_layout Standard
\align center

\size large
Signature 
\size default

\begin_inset CommandInset line
LatexCommand rule
width "20col%"
height "0.5pt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Date 
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset

/
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset

/
\begin_inset CommandInset line
LatexCommand rule
width "5col%"
height "0.5pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract

\shape italic
Artificial Intelligence (AI)
\shape default
 is a crucial and high-interest area of research in the field of Computer
 Science, which has gained increased traction in recent decades due largely
 to the requirements for increasingly sophisticated AI in games, and the
 implications that development of 
\shape italic
algorithms
\shape default
 and 
\shape italic
heuristics
\shape default
 in this area can have on other fields of study such as 
\shape italic
Automated Planning and Scheduling
\shape default
.
 Poker games provide a challenge to 
\shape italic
Intelligent Agents
\shape default
 because of many factors including 
\shape italic
combinatorial explosions
\shape default
 of 
\shape italic
game trees
\shape default
, elements of 
\shape italic
hidden information
\shape default
 such as the cards other players hold, as well as stochastic elements due
 to not knowing which cards are yet to be dealt.
 This differentiates Poker games from more traditional games such as Checkers,
 which is a deterministic 
\shape italic
perfect information
\shape default
 game meaning that each player has the same complete knowledge of the game
 state at any stage and that there is a finite set of moves for each player.
 Therefore at each stage there is an 
\shape italic
optimal move
\shape default
 leading to a winning strategy, and in this manner these games can effectively
 be 
\shape italic
solved
\shape default
, and so when playing against a competent Agent for such a game it is impossible
 to win, only to draw.
 Poker games are different because of the aforementioned stochastic elements,
 imperfect information and complex search trees, necessitating the use of
 more sophisticated algorithms in order for an Agent to perform competently
 versus intelligent opponents.
 While there has been lots of research into Intelligent Agents for traditional
 board games and variants of Poker such as 
\shape italic
Texas Hold'Em
\shape default
, lesser known variants such as the relatively new 
\shape italic
Open Face Chinese Poker
\shape default
 have not been explored to the same degree.
 Agents for Open Face Chinese Poker often suffer from poor performance due
 to reliance on simple algorithms and methods such as 
\shape italic
Rule-Based Systems
\shape default
, which can lead to predictable or sub-optimal play that is additionally
 largely domain specific.
 This dissertation considers the merits and limitations of various AI techniques
, and implements an Intelligent Agent for a bespoke Open Face Chinese Poker
 Web-Application, with discussions of the range of technologies used and
 methodologies employed in creating a functional final product.
 It is advisable for readers unfamiliar with Poker, Computer Science or
 any of the italicised terms found throughout to familiarise themselves
 with the definitions found in the glossary section.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Outline of Introduction 
\end_layout

\begin_layout Standard
Section 1.2 covers an introduction to Open Face Chinese Poker, explaining
 the basic rules and giving illustrated examples of the game board and the
 scoring system.
 Readers unfamiliar with the game will benefit largely from reading this
 section in conjunction with reference to the glossary of terms.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Section 1.3 outlines the problem description, considering the limitations
 of existing Intelligent Agents and the reasons for these limitations.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Section 1.4 outlines specific aims and objectives for the project based on
 functional, non-functional and usability requirements for function, performance
 and meeting user demands.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Section 1.5 discusses the potential for ethical issues in this project and
 its area of research.
 
\end_layout

\begin_layout Subsection
Introduction to Open Face Chinese Poker
\end_layout

\begin_layout Standard
Open Face Chinese Poker (commonly abbreviated to 
\shape italic
OFCP
\shape default
) is a perfect or imperfect information (depending on variant)
\begin_inset Foot
status open

\begin_layout Plain Layout
Standard OFC is a perfect information game, but other variants such as 
\shape italic
Pineapple OFC
\shape default
 also feature elements of hidden information
\end_layout

\end_inset

 card game, and is a variant of 
\shape italic
Chinese Poker.
 
\shape default
In OFCP, players take turns placing cards face-up into three distinct 
\shape italic
rows
\shape default
 (
\shape italic
bottom
\shape default
, 
\shape italic
middle
\shape default
 and 
\shape italic
top
\shape default
), creating the best possible 
\shape italic
poker hands
\shape default
 they can in order to score points from each other.
 Stronger hands score bonus points called 
\shape italic
royalties
\shape default
 and royalty-scoring hands in higher rows score more points than equivalent
 hands in lower rows.
 For example, a 
\shape italic
Royal House
\shape default
 gives +25 bonus points in bottom row, or +50 in the middle row.
 Players score +1 point for each row they win in addition to any royalties.
 In the case that a player wins all 3 rows they score a 
\shape italic
scoop
\shape default
 bonus which grants an additional point for each row, for a total of +6
 base points before royalties are calculated.
 OFCP is a zero-sum game, meaning any gains by one player are balanced with
 losses by another player; players win points directly from their opponents,
 so if a player's score is +16 points then in a 1v1 game it is therefore
 implied that their opponent's score would be -16.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 2.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.2.1 – layout of the board after a round of Open Face Chinese Poker (screensh
ot from an early prototype of the application)
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

Figure 1.2.1 shows the results and layout of the board after a game of OFCP.
 Player 1 wins bottom with a 
\shape italic
Two Pair
\shape default
 8s and 4s versus a 
\shape italic
Pair
\shape default
 of Qs for +1 point.
 Player 1 also wins middle row with Two Pair 7s and 2s versus Pair of 6s
 for +1 point.
 In top row Player 1 and the computer opponent both have a Pair of 3s, and
 so the third card is taken into account as the 
\shape italic
kicker
\shape default
, with Player 1 clinching the win for +1 point with a King kicker versus
 a 7.
 Further to the individual row scores, because Player 1 won every row they
 score an additional scoop bonus of +3.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

One important caveat of the game is that hands in lower rows must be stronger
 than those on the rows above; if a player creates a top-heavy board then
 that player’s hand is invalid, which is known as 
\shape italic
fouling
\shape default
.
 When a player fouls their opponents automatically scoop them for +6 each
 (+1 for each row and +3 scoop bonus) in addition to any royalties, and
 any of the fouled player's royalties are disqualified.
 In the case that all players foul, no points are awarded.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 3.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.2.2 – Player 1 fouls and so their opponent wins an automatic scoop bonus
 plus royalties
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

In the game shown in Fig 1.2.2 Player 1 has Pair of 10s in bottom, Pair of
 3s in middle and Pair of 6s in top.
 Because the top row contains a stronger poker hand than the row below it,
 the hand is invalid and the player fouls.
 On top of the +3 scoop bonus and points for individual row wins, the computer
 opponent wins further points for royalties because of its 
\shape italic
Flush
\shape default
 in bottom and 
\shape italic
Three of A Kind
\shape default
 in middle.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scoring example 1.png
	lyxscale 45
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 1.2.3 – Player 1 wins a lot of bonus points from royalties for strong
 hands 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

Fig 1.2.3 indicates how many points can be won from strong hands.
 Player 1 wins bottom row with 
\shape italic
Four of a Kind
\shape default
 8s versus the computer opponent’s Pair of Jacks.
 Player 1 receives +1 point for winning the row, with an additional +10
 points royalty for Four of a Kind on bottom.
 Player 1 also wins middle row with a 
\shape italic
Full House
\shape default
, Aces full of Deuces versus the computer opponent’s Pair of 9s, scoring
 +1 point for winning the row and an additional +12 royalty.
 Player 1 and the computer opponent both have 
\shape italic
High Card
\shape default
 King in the top row, but the computer opponent wins the row because their
 kicker of 10 beats Player 1's 6 kicker.
 The computer opponent wins +1 point for winning this row but the hand is
 not strong enough to score any additional royalties.
 The points each player wins are taken from their opponent, so the final
 score for Player 1 is 
\begin_inset Formula $-1+13+11=23$
\end_inset

, and the computer opponent’s score is the inverse of this, -23.
 
\end_layout

\begin_layout Subsection
Problem Description 
\end_layout

\begin_layout Standard
Creating sophisticated Intelligent Agents for games with large branching
 factors poses a significant challenge, as for the Agent to perform well
 it must be able to search many moves ahead of the current state in order
 to find the optimal move.
 With every additional level of depth searched in a game tree the complexity
 of the search increases exponentially due to combinatorial explosion; at
 a depth of 
\shape italic

\begin_inset Formula $d$
\end_inset

 
\shape default
with a branching factor 
\begin_inset Formula $B$
\end_inset

 there would be approximately 
\begin_inset Formula $B^{d}$
\end_inset

 potential nodes to explore.
 A brute-force Depth First Search would therefore have a time complexity
 of 
\begin_inset Formula $O(B^{d})$
\end_inset

 which is prohibitively complex for any reasonably exhaustive search of
 a game with a high branching factor.
 Consider for example Chess, which has an estimated branching factor of
 35 (Mandziuk, 2010, p4).
 In his influential paper 
\shape italic
Programming a Computer for Playing Chess
\shape default
, Claude Shannon estimated a lower-bound for the game-tree complexity of
 Chess of 
\begin_inset Formula $10^{120}$
\end_inset

, asserting 
\begin_inset Quotes eld
\end_inset

A machine operating at the rate of one variation per second would require
 over 
\begin_inset Formula $10^{90}$
\end_inset

 years to calculate the first move
\begin_inset Quotes erd
\end_inset

 (Shannon, 1950, p4).
 While in theory exhaustively analysing a game of chess from start to finish
 is possible, it remains implausible with any conceivable modern computer
 despite huge advances in processing speed and power since 1950.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Search Depth
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Approximate Nodes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Approximate Time to Search (
\begin_inset Formula $10{}^{6}$
\end_inset

 nodes/sec)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.5\times10^{-5}$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.2\times10^{-3}$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4.3\times10^{-2}$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.5$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{5}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $52.5$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $6$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $30.6$
\end_inset

 minutes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{7}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $17.9$
\end_inset

 hours
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{8}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $26$
\end_inset

 days
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{9}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.5$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $87.5$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $11$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3061$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $12$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{12}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim100,000$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $20$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{20}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim2.4\times10^{17}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $30$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{30}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim6.7\times10^{32}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $40$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35{}^{40}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim1.8\times10^{48}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Table 1.3.1 showing the intractability of a brute force search of a Chess
 game tree
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

Open Face Chinese Poker does not have such an astronomical space state or
 game-tree complexity as Chess, although unlike Chess it incorporates stochastic
 elements because of its nature as a card game, and the subsequent challenge
 this poses for an Intelligent Agent makes it an interesting area of research.
 Considering there are 
\begin_inset Formula $52!\approx8\times10^{67}$
\end_inset

permutations of a standard deck of cards, representation of each possible
 state in a game tree invokes a combinatorial explosion of branching factor.
 An upper-bound
\begin_inset Foot
status open

\begin_layout Plain Layout
This estimate is generous as it includes duplicate states e.g.
 rows with the exact same cards but in different orders
\end_layout

\end_inset

 for possible final game states is 
\begin_inset Formula $4.96\times10^{14}$
\end_inset

 with an upper-bound estimate for the game tree size of 
\begin_inset Formula $5.77\times10^{32}$
\end_inset

 which poses a similarly daunting complexity.
 The game tree size was calculated by assuming that both player's first
 5 cards are known and then taking into account from there each player's
 sequential turns for the duration of the game, using the following formula:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\left(\binom{3}{1}\cdotp42\right)\times\left(\binom{3}{1}\cdotp41\right)\times\cdots\times\left(\binom{3}{1}\cdotp30\right)\times\left(\binom{2}{1}\cdotp29\right)\times\left(\binom{2}{1}\cdotp28\right)\times\left(\binom{1}{1}\cdotp27\right)\times\left(\binom{1}{1}\cdotp26\right)$
\end_inset


\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Search Depth
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Approximate Nodes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Approximate Time to Search (
\begin_inset Formula $10{}^{6}$
\end_inset

 nodes/sec)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.55\times10^{4}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.5\times10^{-2}$
\end_inset

 seconds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.18\times10^{8}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.6$
\end_inset

 minutes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.75\times10^{12}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $31.8$
\end_inset

 days
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.12\times10^{16}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9.9\times10^{2}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.15\times10^{20}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9.99\times10{}^{6}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $6$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.81\times10^{24}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8.9\times10{}^{10}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.47\times10^{28}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4.65\times10{}^{14}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2.22\times10^{31}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.7\times10{}^{18}$
\end_inset

 years
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Table 1.3.2 showing the possible states to consider in an exhaustive search
 of an Open Face Chinese Poker game tree
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

The rapid expansion of the search space makes it clear that more processing
 power is not in itself a solution to the problem, as combinatorial explosion
 quickly makes deep searches of these games impractical for any realistic
 purposes; even a machine that could search 1 Trillion (
\begin_inset Formula $10{}^{12}$
\end_inset

) nodes per second would take 
\begin_inset Formula $7\times10^{11}$
\end_inset

 years to perform such an exhaustive search of an entire OFCP game tree.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

However, despite the fact that modern computers are still not powerful enough
 to perform such complex and exhaustive searches, competent Intelligent
 Agents for games such as Chess have emerged regardless.
 The reason this is possible is because of different approaches to the problem,
 or through pruning algorithms which reduce the complexity of the search
 by removing branches of the tree that do not provide beneficial information.
 A variety of algorithms and heuristics have been formalised over the decades,
 with the creation of a multitude of Intelligent Agents of varying competence,
 with wide coverage of more traditional games such as Chess and Checkers,
 and even for more complex games such as Go.
 In terms of artificial intelligence applications for Poker, more well-known
 variants such as Texas Hold'Em have seen lots of interest while more obscure
 variants such as OFCP have remained somewhat untouched.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Intelligent Agents do exist for OFCP, but publicly available implementations
 largely play predictably or sub-optimally, often favouring conservative
 play over taking risks, even in situations where fouling would not be heavily
 penalised (such as when the human opponent is in a fouling position themselves).
 There has been little formal research into Intelligent Agents for OFCP,
 and as such limited source material is available.
 Most existing bots for the game are designed for Poker sites which do not
 have any source code made available, or made by development teams which
 license the software out to Poker players for money such as in the case
 of Warren
\begin_inset Foot
status open

\begin_layout Plain Layout
Warren is an OFCP bot which uses neural networks to train and improve, licensed
 out for use at a cost of between $7-79/month depending on chosen package
 (
\color blue
https://www.playwarren.com/
\color inherit
)
\end_layout

\end_inset

.
 Even with such advanced techniques the game has not been solved, as evidenced
 by the modest claim that 
\begin_inset Quotes eld
\end_inset

(Warren) plays almost perfect Open Face Chinese Poker after the 6th card
\begin_inset Quotes erd
\end_inset

.
 Other implementations of Agents for OFCP by hobbyist programmers for personal
 projects often make use of simple algorithms which leads to sub-optimal,
 exploitable play because of predictable or naïve behaviour.
 This project aims to create an Intelligent Agent that performs well versus
 competent human players, and to do so will need to be able to do everything
 a human can in terms of making judgement calls, exploiting the player's
 game position in order to inform its decision as to whether it should take
 a risk or play conservatively to avoid fouling itself.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Aims and Objectives 
\end_layout

\begin_layout Standard
The project aim is to create a functional, competent Intelligent Agent for
 a bespoke Open Face Chinese Poker Web-Application, which can be broken
 down simply into two main objectives.
\end_layout

\begin_layout Enumerate
Create a game environment for Open Face Chinese Poker (Web-Application)
\end_layout

\begin_layout Enumerate
Create an Intelligent Agent which interfaces with the Application and plays
 the game
\end_layout

\begin_layout Standard
Beyond these simple functional requirements the Intelligent Agent must meet
 expectations for competent performance, making strong plays and avoiding
 the pitfalls of more simplistic Agents.
 To create a credible degree of perceived intelligence, the Agent must play
 tactically, avoiding fouling on one hand but not playing in such a risk
 averse and conservative manner as to limit potential for scoring and exploitati
on of a weak player position.
 In addition to this, the Agent must be able to make its decisions quickly
 in order to minimise delay in line with user demands for responsiveness.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

With regards to the Web-Application itself there are multiple demands to
 be met in terms of reliability, usability and functionality.
 The interface must be intuitive and aesthetically appealing, and must feel
 responsive and efficient.
 As it will be a Web-Application accessible via the internet efforts must
 be made to optimise performance and decrease loads times through means
 such as compression of assets and redirection minimisation, also enabling
 larger support for multiple concurrent users and increasing scalability.
 
\end_layout

\begin_layout Subsection
Ethics
\end_layout

\begin_layout Standard
Ethical issues can be a concern in Poker games when playing for money; consider
 for example the implications of a human player unknowingly playing versus
 a Poker Bot.
 This is certainly a major concern for variants of Poker such as Texas Hold'Em
 which has a large online following with numerous websites and applications
 where virtual Poker games are played for real money.
 Open Face Chinese Poker on the other hand is generally only played for
 money in home games, with friends or at casinos as a side-game during or
 after a Texas Hold'Em tournament.
 While some websites do exist for playing OFCP for money, these do not have
 the same level of following as more popular variants of Poker, and the
 Intelligent Agent produced in this project will not provide any kind of
 support for integration with these websites.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

In the context of the proposed application, no money will be involved and
 participants will be playing purely for entertainment value and research
 interest in Artificial Intelligence.
 This mitigates potential ethical issues as the project focuses not on aspects
 of gambling but rather on the technologies and methodologies used in creating
 the Web-Application and system architecture, as well as the pros and cons
 of various algorithms for producing a sophisticated Intelligent Agent.
 
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
Game Theory 
\end_layout

\begin_layout Subsubsection
Minimax 
\end_layout

\begin_layout Standard
While game theory has been discussed at least as far back as 1713, it wasn't
 until John von Neumman's research into the field that game theory was establish
ed as a mathematical discipline.
 Neumann's early efforts focused on proving the minimax theorem, which was
 put forward in his 1928 paper 
\begin_inset Quotes eld
\end_inset


\shape italic
Zur Theorie der Gesellschaftsspiele
\shape default

\begin_inset Quotes erd
\end_inset

 (The Theory of Board Games).
 Proving the minimax theorem was considered by Neumman to be of utmost importanc
e, saying 
\begin_inset Quotes eld
\end_inset

I thought there was nothing worth publishing until the Minimax Theorem was
 proved
\begin_inset Quotes erd
\end_inset

 (Casti, 1996, p19).
 The minimax theorem states that in any finite zero-sum two player game
 there exists strategies for each player that minimise their maximum losses
 (hence minimax).
 These strategies must consider their adversary's possible responses, and
 the strategy which minimises a player's maximum losses is known as the
 optimal strategy.
 Expanding on his 1928 paper, Neumman co-authored 
\shape italic

\begin_inset Quotes eld
\end_inset

Theory of Games and Economic Behavior
\shape default

\begin_inset Quotes erd
\end_inset

 in 1944, which presented a different proof of the minimax theorem, extending
 the theorem to include imperfect information games and games with more
 than two players.
 This 1944 publication was the first formal, coherent book in the field
 of game theory and is the basis for modern game theory.
 .
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Minimax tree search explores potential moves, looking for moves that maximise
 a player's chance of winning.
 It is not useful to explore moves tjat 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Game theory – John von Neumann.
 Traditional Game Search: e.g.
 1928 neumann proposes minimax tree search.
 Minimax decision rules dictate that in a 2-player zero-sum perfect information
 game there exists strategies for each player that minimise his maximum
 losses (hence minimax) which must be based on considerations of all the
 adversary’s possible responses.
 The strategy which minimises a player’s maximum losses is called the optimal
 strategy.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Naïve minimax vs alpha-beta pruning: AB pruning eliminates branches of the
 search tree where a possibility has been found which is worse than a previously
 examined move, meaning this branch cannot possibly influence the final
 decision.
 These traditional methods work well for e.g.
 chess, checkers, but are generally insufficient for more complex games
 that cannot be ‘solved’ e.g.
 imperfect information games such as poker.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Checkers state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
20
\end_layout

\end_inset

 (relatively low complexity, weakly solved with traditional algorithms)
\end_layout

\begin_layout Standard
Chess state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
47
\end_layout

\end_inset

 (higher complexity, partially solved e.g.
 with retrograde algorithms.
 May be impossible to solve with current technology) 
\end_layout

\begin_layout Standard
Go state complexity: 10
\begin_inset script superscript

\begin_layout Plain Layout
171
\end_layout

\end_inset

 (very high complexity, unlikely for strong AI to come out for many years)
\end_layout

\begin_layout Standard
1940s: Monte Carlo methods formalised.
 2006: Remi Coulom proposed Monte Carlo Tree Search – run random simulations
 and build search trees from the results.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
MCTS has quickly gained traction as a strong general purpose algorithm for
 AI in games due to its effective results with (if properly implemented)
 low space and time complexity.
 MCTS concentrates on analysing the most promising moves, basing the expansion
 of the search tree on random sampling of the search space.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The game tree in MCTS grows asymmetrically, concentrating on searching more
 promising branches.
 Because of this it achieves better results than classical algorithms in
 games with a high branching factor.
 One of the most enticing benefits of MCTS is that it requires no strategic
 or tactical knowledge about a problem domain other than end conditions
 and legal moves, making MCTS implementations flexible and applicable to
 a variety of problem domains with little modification.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“The basic MCTS algorithm is simplicity itself: a search tree is built,
 node by node, according to the outcomes of simulated playouts.
 The process can be broken down into the following steps: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename MCTS algorithm graphic.png
	lyxscale 85
	scale 85

\end_inset


\end_layout

\begin_layout Standard
\align center
-
\color blue
 http://www.cameronius.com/research/mcts/about/index.html
\color inherit
 
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Basic algorithm can be weak, but there are many enhancements e.g.
 Upper Confidence Bounds for Trees (UCT), used in 90% of MCTS applications.
 UCB formula: 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $v_{i}+C\times\sqrt{\frac{\ln N}{n_{i}}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“where vi is the estimated value of the node, ni is the number of the times
 the node has been visited and N is the total number of times that its parent
 has been visited.
 C is a tunable bias parameter.
 Exploitation vs Exploration The UCB formula provides a good balance between
 the exploitation of known rewards and the exploration of relatively unvisited
 nodes to encourage their exercise.
 Reward estimates are based on random simulations, so nodes must be visited
 a number of times before these estimates become reliable; MCTS estimates
 will typically be unreliable at the start of a search but converge to reliable
 estimates given sufficient time and perfect estimates given infinite time.”
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Improvements to MCTS? Light playouts – random moves.
 Heavy playouts utilise heuristics to influence choice of moves.
 “MCTS and UCT Kocsis and Szepervari (2006) first formalised a complete
 MCTS algorithm using UCB and dubbed it the Upper Confidence Bounds for
 Trees (UCT) method.
 This is the algorithm used in the vast majority of current MCTS implementations.
 UCT may be described as a special case of MCTS, that is: UCT = MCTS + UCB”
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
“Previous work has adapted MCTS to games which, like Spades, involve hidden
 information.
 This has led to the development of the Information Set Monte Carlo Tree
 Search (ISMCTS) family of algorithms (Cowling, Powley, and Whitehouse 2012).
 ISMCTS achieves a higher win rate than a knowledge-based AI developed by
 AI Factory for the Chinese card game Dou Di Zhu, and also performs well
 in other domains.
 ISMCTS uses determinizations, randomisations of the current game state
 which correspond to guessing hidden information.
 Each determinization is a game state that could conceivably be the actual
 current state, given the AI player’s observations so far.”
\end_layout

\begin_layout Standard
-
\color blue
 http://www.aaai.org/ocs/index.php/AIIDE/AIIDE13/paper/viewFile/7369/7595 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
ISMTCS useful for games like traditional Texas Hold’Em poker where each
 player is privy to information that others are not – i.e.
 their own cards.
 ISMTCS can model various possible game states/ permutations of what other
 players could have – guessing other players cards based on previous information.
 Not needed for OFCP because all players have the same information – cards
 are placed face up.
 However, could come into play for custom variants of OFC, such as pineapple
 – e.g.
 to model which cards are unlikely to have appeared based on how they play;
 if a player has a king on bottom row but does not pair it in the next hand
 then it is almost certain that the discarded card is not a King.
 Information can be built in this way to influence determined probabilities
 of certain cards appearing and AI can act appropriately.
 
\end_layout

\begin_layout Subsection
Artificial Intelligence in Poker 
\end_layout

\begin_layout Standard
Pot limit poker solved.
 Not true for holdem.
 Where does OFC stand? Reasonable complexity for standard OFC, but other
 variants of OFC are even more complex e.g.
 Pineapple OFC.
\end_layout

\begin_layout Standard
permutations for standard OFCP game state: deck of 52 cards, each player
 places 13 cards (26 total for a heads up game) 
\end_layout

\begin_layout Standard
52 choose 26 = 495,918,532,948,104 ( 4.9591853e+14 ) [including duplicates]
 
\end_layout

\begin_layout Standard
Methods e,g, database look ups impractical to implement due to space complexity
 of game.
 Need a method which has a suitable compromise between time and space complexity.
 Monte Carlo methods are perfect for this, especially considering the usage
 of heuristics which can optimise the algorithm e.g.
 UCT, pruning tree branches 
\end_layout

\begin_layout Standard

\color blue
http://scrambledeggsontoast.github.io/2014/06/26/artificial-intelligence-ofcp/
\color inherit
 - Haskell AI for OFC ‘Kachushi’.
 Carries out monte carlo simulations of rest of game to inform expected
 value for decisions.
\end_layout

\begin_layout Subsection
Hand Evaluation Algorithms 
\end_layout

\begin_layout Standard
For any Poker game - and indeed for any Poker AI - hand evaluator functions
 are necessary to rank, score and compare hands.
 A naïve approach to the problem could involve step-by-step comparison of
 a given hand against each entry in a comprehensive list of hands and matching
 ranks.
 Such a technique would generally prove efficient in terms of time-complexity
 and could prove to be significantly faster than performing scoring calculations
 on demand.
 One problem with this approach however is that it would necessarily involve
 pre-computation and scoring of every single possible hand combination,
 which would undoubtedly be a lengthy process.
 Another issue is potential memory and space constraints, dependent on the
 system and application in question.
 There are 
\begin_inset Formula $\binom{52}{5}=2,598,960$
\end_inset

 possible Poker Hands, and representation of each would amount to a sizeable
 lookup table
\begin_inset Foot
status open

\begin_layout Plain Layout
For example, this Poker hand lookup table is 100MB (
\color blue
https://github.com/chenosaurus/poker-evaluator/blob/master/data/HandRanks.dat
\color inherit
) 
\end_layout

\end_inset

.
 This could prove problematic for example in the case of a pre-packaged
 application; it would be incredibly undesirable to include such a large
 file.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

In situations where such a technique is infeasible or undesirable, for example
 due to memory constraints, other approaches are possible.
 On-demand hand evaluation can be achieved in a variety of ways, for example
 through a simple histogram approach which reads in a hand and records the
 frequency of each card rank.
 Using this information the evaluator would be able to work out the hands
 rank based on highest rank frequencies.
 For example, a hand consisting of 
\begin_inset Quotes eld
\end_inset

2 of diamonds, 2 of hearts, 5 of clubs, 7 of spades, King of diamonds
\begin_inset Quotes erd
\end_inset

 would be represented in a histogram as seen below.
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="14">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Card Rank
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
J
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
K
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rank Frequency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Table 2.3.1 - Demonstrating how a histogram approach would store information
 about a hand
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In this example the evaluator would then analyse the histogram, recognising
 that the highest frequency rank was 2 (indicating a pair), and that no
 other frequency was higher than 1 (indicating there is no second pair),
 and that the highest ranked card with a frequency above 0 was a King.
 A potential format of this information could be along the lines of 
\begin_inset Formula $[1,2,13]$
\end_inset

, where the first number indicates the overall hand rank (1 signifying a
 Pair), the second number indicating the rank of the card with this frequency
 (2), and the third number indicating the kicker (13 signifying a King).
 This could then be used directly elsewhere for comparison, or interpreted
 into a more readable format such as 
\begin_inset Quotes eld
\end_inset

Pair of 2s, King kicker
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The advantage of this approach comes in its simplicity as it is trivial
 to implement and easy to understand, and provides a strong compromise between
 space and time complexity.
 One limitation to note is that simply mapping frequencies of hands is not
 enough to produce complete results; additional consideration must be made
 to check for straights and flushes.
 However, this does not pose a significant challenge, as simple checks can
 be made if the highest frequency found is 1 to see whether all the suits
 are the same, or if the 5 cards are sequential.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

These kind of approaches to hand evaluation have reasonable efficiency,
 with the potential to evaluate hundreds of thousands of poker hands per
 second, and considering the relative ease of implementation are perfect
 for most purposes.
 However, more efficient algorithms require less processing power enabling
 higher throughput and faster execution times, and as such can be hugely
 beneficial for large scale applications.
 Other approaches to hand evaluators generally are not so simple, using
 shrewd techniques and taking full advantage of the efficiency of low level
 languages such as C.
 One such evaluator is Cactus Kev's
\begin_inset Foot
status open

\begin_layout Plain Layout
For more information on how this algorithm works see here (
\color blue
http://www.suffecool.net/poker/evaluator.html
\color inherit
)
\end_layout

\end_inset

, the principle component of which is the realisation that while there are
 2,598,960 possible combinations of Poker Hands, these can be sorted into
 7462 distinct categories.
 Through the use of various methods including efficient card representations,
 bitwise operations, lookup tables and binary searches, an incredibly fast
 hand evaluator can be constructed.
 The main disadvantage of using such an approach is the complexity to implement,
 and the ease of deployment is entirely dependent on the specific environment
 due to the nature of compiled C code.
 In addition, the feasibility of using such an evaluator is dependent on
 the compatibility of any other technologies and languages used.
 
\end_layout

\begin_layout Section
Design and Approach 
\end_layout

\begin_layout Subsection
Requirements Specification
\end_layout

\begin_layout Standard
The requirements for this project were driven by the need to meet user demands
 and expectations for the Application, as well as ensuring the quality of
 the Intelligent Agent produced.
 The functional requirements below describe what the system will do.
\end_layout

\begin_layout Enumerate
Create a game environment for Open Face Chinese Poker (Web-Application)
\end_layout

\begin_deeper
\begin_layout Enumerate
The Application must implement appropriate rules for the game - fouling,
 scoring system
\end_layout

\begin_layout Enumerate
Enable alternate round support - player acts first in Round 1, Intelligent
 Agent acts first in Round 2 etc.
\end_layout

\begin_layout Enumerate
Use appropriate networking technology to support concurrent connections
 so multiple users can play at once 
\end_layout

\end_deeper
\begin_layout Enumerate
Create an Intelligent Agent to play Open Face Chinese Poker
\end_layout

\begin_deeper
\begin_layout Enumerate
The Intelligent Agent must interface with the Web-Application in order to
 make its moves 
\end_layout

\begin_layout Enumerate
The Intelligent Agent must adhere to all rules of the game
\end_layout

\begin_layout Enumerate
The Intelligent Agent must not use any information a human player in its
 position would not have (i.e.
 it will not cheat)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

Building on these are non-functional requirements specifying how the system
 will work, which fall into 4 categories: Reliability, Usability, Supportability
 and Performance.
 
\end_layout

\begin_layout Itemize

\series bold
Reliability
\end_layout

\begin_deeper
\begin_layout Enumerate
The System must be reliable with minimal errors and failures: Long Mean-Time-To-
Failure 
\end_layout

\begin_layout Enumerate
Uptime of the Application should be maximised, meaning minimal downtime
 for upgrades and avoidance of fatal crashes 
\end_layout

\begin_layout Enumerate
Implement support for performance monitoring through logs of errors, server
 actions and statistics (e.g.
 time taken for requests) 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Usability
\end_layout

\begin_deeper
\begin_layout Enumerate
The Application should be responsive and quick to load 
\end_layout

\begin_deeper
\begin_layout Enumerate
The website should load in an acceptable time (<1s is optimal) 
\end_layout

\begin_layout Enumerate
The Application should feel responsive e.g.
 when dragging cards 
\end_layout

\end_deeper
\begin_layout Enumerate
Interface elements should be intuitive and easy to understand (clearly labelled
 buttons, instructions) 
\end_layout

\begin_layout Enumerate
The aesthetics of the Application should be pleasing - good layout, colour
 scheme, graphical elements
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Supportability
\end_layout

\begin_deeper
\begin_layout Enumerate
Maximise potential for scalability through maximised throughput and appropriate
 optimisations to reduce Application's footprint
\end_layout

\begin_layout Enumerate
Reconfiguring the Application should not require extensive or problematic
 changes.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Tweaking values should be easy e.g.
 time limit for Intelligent Agent's decisions
\end_layout

\begin_layout Enumerate
Adding features shouldn't break the system - achieved through good design
 structure
\end_layout

\end_deeper
\begin_layout Enumerate
The Application should be compatible with as many devices as possible
\end_layout

\begin_layout Enumerate
Installation of the Application should be easy, requiring minimal reconfiguratio
n 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Performance
\end_layout

\begin_deeper
\begin_layout Enumerate
Users should not have to wait more than 5 seconds after their input for
 the Intelligent Agent to make its move
\end_layout

\begin_deeper
\begin_layout Enumerate
Employ heuristics and efficient algorithms to optimise performance 
\end_layout

\end_deeper
\begin_layout Enumerate
Stress Requirements: The Application must be able to support at least 100
 concurrent users 
\end_layout

\begin_layout Enumerate
Throughput: At least 95% of the time, the Application should take no more
 than 5 seconds for any request 
\end_layout

\begin_layout Enumerate
The Intelligent Agent must play competently and provide a significant level
 of challenge to human opponent
\end_layout

\end_deeper
\begin_layout Subsection
Use Case and Data Flow Diagrams
\end_layout

\begin_layout Standard
Cheng is a gambling degenerate who wishes to improve his OFC gameplay 
\end_layout

\begin_layout Standard
Most of the complexity of the Application will be hidden from the user,
 with heavy processing of data and algorithms handled behind the scenes.
 In terms of interaction with the application there will be a frontend interface
 which will allow the user to interact with and play against the Intelligent
 Agent.
 At its highest level of abstraction from the user's perspective, a use
 case can simply boil down to the diagram below.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-Use-Case .png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.2.1 - Highly abstract Use Case Diagram for the Application from an end
 user's perspective
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
A more useful analysis of how a user will interact with the Application
 considers individual actions a user will need to be able to carry out,
 which is presented below.
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-User-Actions.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.2.2 - Individual actions and events necessary for the user to interact
 with the Application
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
For the Application to function there must be a sequential process of user
 inputs followed by Application outputs, demanding further inputs and so
 on.
 For example, after a user places their cards for one round, the Application
 must output a response with the Intelligent Agent's card placements as
 well as the next card for the player to place.
 In order for this to work there must be at least 2 tiers for the application:
 a frontend and a backend.
 The frontend will be responsible for displaying information to the user
 and handling the interface, while the backend will be responsible for the
 main processing tasks such as processing the game state, determining the
 Intelligent Agent's moves and handling the game logic.
 This will require a 2 way flow of information from the frontend of the
 Application to the backend, with the frontend sending data describing the
 user's inputs to the backend, which will process this and return a formatted
 response which the frontend can interpret and display to the user.
\end_layout

\begin_layout Standard
In practice, the Application will make use of a standard three tier architecture
, with a frontend for client interacton; an Application layer for the processing
 tasks and communication between the higher and lower tiers; and a database
 for storage and management of game state information.
 A data flow diagram has been constructed to visualise this process.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-Data-Flow.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.2.3 - Data Flow Diagram modelling the 2 way flow of information in the
 Application
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Subsection
Design Overview
\end_layout

\begin_layout Standard
Most client requests will be handled by a Web Server serving static content
 such as images, CSS and JavaScript files.
 Dynamic requests, however, will be passed by the Web Server to an Application
 server, which will then process the request, undertaking any necessary
 interactions with other pieces of software before formatting and returning
 a response.
 This response will then be passed up from the Application Server to the
 Web Server and from there back to the client's browser.
 The diagram below illustrates this process.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-System-Architecture.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.3.1 - System Architecture Diagram
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
A lower level of abstraction from this System Architecture considers specific
 technologies which will enable the system to function as a whole.
 The Application will be hosted using a Virtual Private Server running Ubuntu
 14.04, aided by various technologies.
 Use of HTML, CSS and JavaScript will be largely responsible for the frontend
 of the application and will be served using an Nginx reverse proxy server.
 In order to produce dynamic web pages Jinja2 templates will be utilised,
 which will be served through Nginx by an Application Server implemented
 with CherryPy, a Pythonic Web Application Framework.
 User actions which require a response will be handled using JavaScript
 which will send HTTP POST requests containing the game state information
 to the CherryPy server.
 Here, the request will be parsed and sent on to the backend for processing,
 which will be handled with Python scripts.
 The backend will validate the sent game state and call helper functions
 and scripts to handle processes such as hand evaluation and scoring, handling
 the Intelligent Agent's turn and dealing cards.
 If everything is in order and once all necessary processes have been completed,
 the game state will be stored in a MongoDB document-oriented database,
 and an appropriate response containing information for the frontend will
 be produced in JSON format and sent back to the client.
 The JavaScript will parse and handle this response, reflecting the updates
 to the game state on the web page by dynamically creating and updating
 HTML DOM Element Objects.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-Software-Architecture.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.3.2 - Software Architecture Diagram
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Subsection
Wireframe
\end_layout

\begin_layout Standard
The Application's frontend will consist of one dynamic webpage, using Jinja2
 templates to enable persistent information across multiple rounds, with
 content dynamically updated and created using JavaScript.
 Following Jakob Nielsen's general principles for interaction design (Nielsen,
 1994, p115), the interface for the site will be made as intuitive as possible
 with a clear, well-structured layout.
 The simpler the interface, the easier to understand and use, and following
 this concept the wireframe mockup presented below was produced.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Diagram-Wireframe.png
	lyxscale 80
	scale 80

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 3.4.1 - Wireframe of the Interface demonstrating a clear, simple layout
 in adherence to principles for interaction design
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The player and Intelligent Agent have distinct, separate play areas on either
 side of the screen where they will place their respective cards.
 Use of the interface is as simple as possible, with cards to be placed
 appearing at the bottom of the screen to be dragged and dropped into free
 positions on the board.
 The process of starting a game, finalising card placements and moving onto
 a new round will all be controlled through one dynamic button, making the
 game process as simple and intuitive as possible for the user; there are
 no surprises and behaviour remains consistent throughout the game.
 This is in strict adherence to Nielsen's aforementioned usability principles,
 specifically regarding consistency.
 
\end_layout

\begin_layout Subsection
Design Principles 
\end_layout

\begin_layout Standard
The design principle to adhere to throughout the process of creating the
 application will be Rapid Application Development using Evolutionary Prototypin
g, creating a functional prototype at each stage which can be refined and
 updated to implement new features and meet changing requirements per user
 feedback.
 This approach is ideal for the needs of the project as it allows for a
 flexible approach and means that emphasis can be put on development, creating
 a functional or semi-functional application at each stage, implementing
 some of the planned features, meeting some of the requirements and being
 ready to build upon and develop further into a new version which improves
 upon itself.
 This flexible style is naturally advantageous over a more traditional approach
 such as the Waterfall model which involves rigorously defining specifications
 from the start, which means making changes down the line becomes increasingly
 difficult and costly; such a style of development was appropriated from
 other industries before more suitable methodologies of software development
 were formalised.
 Rapid Application Development allows for a versatile development-driven
 approach which naturally incorporates user feedback, design and testing
 as part of the cyclic process, which hopefully will result in a better,
 well-rounded final product.
 
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Technologies 
\end_layout

\begin_layout Standard
Website and application created with HTML, CSS and Javascript with OFCP
 game page created dynamically with jinja2 templates.
\end_layout

\begin_layout Standard
Python backend handling dealing of cards, processing game state, AI's card
 placements and scoring of game board 
\end_layout

\begin_layout Standard
Pure python networking with cherrypy, which is efficient and can handle
 up to 1000 concurrent requests which is more than enough for the requirements
 of this project.
 
\end_layout

\begin_layout Standard
Site hosted using DigitialOcean VPS running Ubuntu 14.04 with CherryPy behind
 nginx reverse-proxy
\begin_inset Foot
status open

\begin_layout Plain Layout
This tutorial was incredibly helpful for this purpose: 
\color blue
https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applica
tions-using-a-cherrypy-web-server-behind-nginx 
\end_layout

\end_inset

.
 This allowed for a more robust system architecture with reduced stress
 on the CherryPy server as nginx was configured to handle client requests,
 meaning that scalability in the future is more feasible.
 
\end_layout

\begin_layout Standard
Game states stored in database using MongoDB (which is a document-oriented
 database as opposed to a traditional relational database which decreases
 development time and reduces complexity as there is no need to constantly
 transform the data when reading from the database into the python backend.
 Mongodb is scalable and high performance, and allows for flexible data
 structures for example with optional values being handled trivially, with
 the databases getting type information from the data itself meaning they
 can map easily into program objects, which is specifically advantageous
 in this application because of the use of dictionaries to store the game
 state.
 The flexibility and ease of deployment of such a style of database makes
 their use well suited for web-applications such as this one) run in docker
 virtual environment.
 
\end_layout

\begin_layout Standard
Version control with github: OFCP-AI private repository.
 Use of version control is paramount as it allows for undesirable changes
 to be rolled back easily, and if something goes wrong there is always working
 versions available to roll back to.
 Using multiple branches (master and experimental) meant that a stable version
 could be maintained while new features were implemented safely on the experimen
tal branch without affecting or potentially breaking the master version.
 Also allows for 'releases' for different versions of the software e.g.
 legacy client-side only, current with feature-full self-contained application
 
\end_layout

\begin_layout Subsection
Intelligent Agent- algorithms, heuristics etc
\end_layout

\begin_layout Standard
write it all here - monte carlo, descision rules for placements/ pruning,
 EV.
 Everything.
 Wow.
 Do it.
 Soon.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

First 5 placements approach - find all permutations of possible placements
 (13 choose 5 = ~1.2k) then remove duplicates (e.g.
 ADAHAKASKD and KDASAHASAC - different order but effectively same state)
 -> reduces max states to consider to ~240.
 Next even more pruning/ optimisation by implementing heuristics to evaluate
 hand and remove some obviously bad placements e.g.
 if AI is dealt two cards of same rank, will always place these together
 (removes states with these cards in separate rows).
 Also applies to trips, four of a kind etc.
 -> better the hand the less states considered.
 Worst case scenario with 5 unique ranked cards no straight/ flush potential
 = over 200 states, potentially suboptimal placements due to need to return
 move decision in <= 5 seconds (very little time for each simulation - 5
 seconds to simulate 200 states will not produce best results except with
 exceptional hardware).
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Subsequent card placements a lot easier - carry out simulations for as many
 seconds as possible (hardcoded limits can be tweaked in response to user
 feedback [sweet spot 2-4s, 5s meets requirements but makes game feel somewhat
 slow]).
 Aggregates EV for placements in each row and choose highest result, update
 state return placement info to frontend along with player's next card.
 With only 3 choices to make (place card in top, middle or bottom) can potential
ly get thousands of simulations for each placement which should give close
 to optimal results - see limitations in reflection e.g.
 potential for overvaluing moves.
 Simulated random population of rest of board for scoring EV is naive but
 works well most of the time.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Live Implementation
\end_layout

\begin_layout Standard
The Application is available and playable at the following URI:
\color blue
 http://www.alastairkerr.co.uk/ofc
\color inherit
 
\end_layout

\begin_layout Section
Evaluation
\end_layout

\begin_layout Standard
usability tests - table of what tests, what happened
\end_layout

\begin_layout Standard
questionnaire and results, general evaluation
\end_layout

\begin_layout Subsection
Unit Tests 
\end_layout

\begin_layout Standard
continuous integration/ deploymentwith continuous integration when you make
 a commit to github it automatically connects to server and runs the tests,
 if they pass it deploys it http://code.tutsplus.com/tutorials/setting-up-continuo
us-integration-continuous-deployment-with-jenkins--cms-21511
\end_layout

\begin_layout Standard
Modular testing of code e.g.
 individual functions using unittest python framework
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python sample error catching.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.1 - Sample code from function ‘reformat_hand_xyy_yx’ in helpers.py
 script: use of input validation and try except blocks to catch errors
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python test inputs.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.2 - Test inputs to ensure function works as intended
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Testing/helpers/reformat_hand_xyy_yx python output.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Fig 4.1.3 - Output – invalid hands are handled properly, throw exceptions/
 print usage messages rather than throwing errors 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Subsection
Performance of AI versus human players 
\end_layout

\begin_layout Standard
Alpha testing: playing individual games with participants vs AI Playing
 vs experienced players, new players – get an indication of AI’s comparative
 skill level 
\end_layout

\begin_layout Subsection
Performance of AI versus other AI
\end_layout

\begin_layout Standard
Pit this intelligent agent vs other AI and/or previous/ alternative versions
 of itself.
 E.g.
 performance of AI with MCTS vs AI using AB pruning/ minimax, MCTS vs totally
 random placement: if AI is working well should vastly outperform a naive
 AI.
 Visualisations of performance e.g.
 graphs, tables of win rates Database storing moves -> this would allow
 for analysis of individual rounds, games etc.
 
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Subsection
Aims and Objectives
\end_layout

\begin_layout Standard
To what extent were the aims met? Sophistication and performance of AI?
 Were all features implemented?
\end_layout

\begin_layout Standard
Performance of website: http://tools.pingdom.com/fpt/#!/cXxmxY/http://alastairkerr.
co.uk/ofc/play/5540d2e7b878ce06943c74f2/next 
\end_layout

\begin_layout Subsection
Reflection 
\end_layout

\begin_layout Standard
Reflection on project, decisions, performance etc.
\end_layout

\begin_layout Standard
Design - frontend is functional but could have been designed better from
 the start.
 e.g.
 originally hard-coding player's card image objects rather than dynamically
 creating them with javascript
\end_layout

\begin_layout Standard
Backend works well but if different technologies and languages were used
 could be more efficient - e.g.
 hand evaluators written in C using bitwise operators could evaluate millions
 of hands per second rather than hundreds of thousands - could shave off
 seconds of processing time which could either lead to increased responsiveness
 or allow for more games to be simulated by the AI making it more likely
 to find optimal solutions for hand placements.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The choice of a flexible software methodology worked well overall because
 of the evolving requirements and design choices, as well as the individual
 nature of the project.
 In comparison, in a large team of developers issues with this approach
 could arise from lacking a clear design focus and having limited control
 - a necessary trade-off that is an inevitable consequence of the increased
 flexibility this methodology enables.
 One important pitfall to avoid with Rapid Application Development is focusing
 too much on individual components without getting a clear view of the system's
 design, making minor changes without considering possibilities for an improved
 design structure.
 While there is generally a clear design phase before entering the initial
 implementation stage, there can be a tendency to omit a renewed design
 phase in subsequent implementation cycles leading to a lack of documentation
 which can have large consequences down the line; as Gerber et al.
 (2007) state in the analysis of one case study 
\begin_inset Quotes eld
\end_inset

...
 due to the fact that the design was not formally documented and reviewed,
 the discrepancy was only discovered after the implementation phase.
 This situation caused conflict between developers and analysts and in the
 end necessitated a redesign effort which put unnecessary pressure due to
 time constraints and limited resources on the whole development team
\begin_inset Quotes erd
\end_inset

.
 Design choices in early prototypes had a carry-on effect which meant that
 later down the line code refactoring was necessary in order to create a
 more coherent system structure, which potentially could have been avoided
 or reduced with a stricter design philosophy.
 
\end_layout

\begin_layout Standard
An apt example of this is seen in legacy prototypes of the application,
 which were client-side only.
 This was a choice that was made in order to quickly create a functional
 prototype, using JavaScript to simulate processes that would be handled
 elsewhere in the final application's architecture (such as dealing cards).
 This was useful because it resulted in a functional application which implement
ed some of the planned features, leading to a clearer understanding of the
 needs of the project, but had to be adapted later in order to create a
 more logical system structure which could meet the requirements, such as
 backend processing to handle the game states and calculate the Intelligent
 Agent's moves.
 
\end_layout

\begin_layout Subsection
Improvements
\end_layout

\begin_layout Standard
add a new game button! 
\end_layout

\begin_layout Standard
What can be done to improve the application/ AI in the future? 
\end_layout

\begin_layout Standard
Limitations: “With any method based on random simulation, it is inevitable
 that poor quality moves will be chosen with nonzero probability, due to
 a particularly lucky run of simulations making the move appear better than
 it is.
 “ - 
\color blue
http://www.aaai.org/ocs/index.php/AIIDE/AIIDE13/paper/viewFile/7369/7595
\color inherit
 page 5 
\end_layout

\begin_layout Standard
Due to the need for a compromise between finding the optimal solution and
 finishing the request in a reasonable amount of time the number of simulated
 games is limited and therefore it is possible that sub-optimal plays will
 be over-valued due to the element of randomness.
 
\end_layout

\begin_layout Standard
Improve frontend – make the app more visually appealing 
\end_layout

\begin_layout Standard
Multiplayer support for players vs players as well as players vs AI(s) or
 players vs players vs AI(s)
\end_layout

\begin_layout Standard
Add support for other variants of OFC such as pineapple - includes elements
 of hidden information as players choose to discard one card, the identity
 of which is known only to them.
 Will increase complexity of game requiring further modifications/ improvements
 to Agent, and would make any performance issues even more of an obstacle.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The Intelligent Agent generally favours optimal card placements, but because
 of the element of randomness in evaluating moves there is the potential
 for the AI to mistakenly over-value a sub-optimal move.
 As Whitehouse et al.
 (2013, p5) state 
\begin_inset Quotes eld
\end_inset

With any method based on random simulation, it is inevitable that poor quality
 moves will be chosen with nonzero probability, due to a particularly lucky
 run of simulations making the move appear better than it is
\begin_inset Quotes erd
\end_inset

.
 This potential for inaccurate evaluation of a move's strength has an inverse
 relationship with the number of iterations of simulated games - as the
 number of iterations increase the result diverges to the optimal solution,
 meaning that with an infinite amount of simulations the probability of
 finding the best move is 1.
 The performance of the Intelligent Agent therefore could be improved with
 more processing power and/or a longer allocated time to simulate games,
 although it is important to note that there are diminishing returns with
 this strategy; doubling the iterations does not mean that the results will
 be twice as good.
\end_layout

\begin_layout Standard
This ties in with the choices made for the implementation and configuration
 of the Agent, specifically in regards to compromises between responsiveness
 and finding the best move - in the specified requirements the Agent was
 intended to take no more than 5 seconds to calculate its turn, and the
 application satisfies this requirement.
 However, increasing the iterations would make satisfying this criteria
 infeasible without increased processing power or through further optimisation.
 This could be achieved in various ways, for example by rewriting the applicatio
n in a more efficient language such as C, or by implementing more advanced
 heuristics to reduce the complexity of the calculations, or using a different
 algorithm such as a more advanced implementation of the Monte Carlo method
 like Monte Carlo Tree Search with UCT, as discussed in Section 2 of this
 dissertation.
 Overall the implementation of the Intelligent Agent satisfies the specified
 requirements and works well for its intended purpose in the scope of this
 application, but for larger scale implementations would likely need to
 make use of one or more of these changes in order to achieve increased
 scalability, for example for use in a commercial application with thousands
 of concurrent users.
 
\end_layout

\begin_layout Section
Glossary of Terms 
\end_layout

\begin_layout Subsection
Poker Variants
\end_layout

\begin_layout Itemize

\series bold
Texas Hold'Em
\series default
 is a popular variant of Poker where each player receives 2 cards for use
 individually in combination with 5 community cards shared between all players,
 with players combining any of their available cards in order to create
 the strongest standard poker hand possible
\end_layout

\begin_layout Itemize

\series bold
Chinese Poker
\series default
 is a variant of poker where players are dealt 13 cards which they must
 arrange into three rows, placed face down.
 Players announce in clockwise order whether or not they wish to play their
 hand, and then all players announce their royalties and show their cards
\end_layout

\begin_layout Itemize

\series bold
Open Face Chinese Poker
\series default
 is a variant of Chinese Poker where players act in clockwise order, receiving
 first 5 cards which are placed face up and then one card at a time until
 all players have placed 13 cards.
 Players must create valid hands consisting of stronger poker hands in lower
 rows, and score points from their opponents for winning corresponding rows.
 Additional points known as royalties can be won for particularly strong
 hands
\end_layout

\begin_layout Itemize

\series bold
Pineapple OFC 
\series default
is a sub-variant of Open Face Chinese Poker, following the same basic rules
 as the standard variant with the distinction that in subsequent rounds
 after the initial 5 card placements, players receive 3 cards and choose
 to place 2 and discard 1.
 This introduces higher action play as well as elements of hidden information
 as other players are unaware of which cards their opponents have discarded,
 although there is potential to infer this information based off of how
 the player acts 
\end_layout

\begin_layout Subsection
Poker Hands Guide (Weakest to Strongest)
\end_layout

\begin_layout Itemize

\series bold
High Card
\series default
 is the lowest ranking poker hand and is the default when no other hands
 have been made.
 An example High Card is the Jack of Spades, which would beat any hand comprised
 of a High Card ranked 10 or less, but would lose to a High Card Queen,
 King, Ace, or any stronger poker hand.
\end_layout

\begin_layout Itemize

\series bold
Pair
\series default
 is the second weakest poker hand.
 A player has a pair when they have two cards of the same rank, for example
 the 7 of Hearts and 7 and Clubs would form a Pair of 7s.
 
\end_layout

\begin_layout Itemize

\series bold
Two Pair
\series default
 is the next strongest hand rank, consisting of two different pairs.
 For example having the 5 of Spades, 5 of Diamonds, 9 of Hearts and 9 of
 Clubs would form Two Pair 9s and 5s.
 When comparing a Two Pair to another Two Pair the highest ranked pair takes
 precedence.
\end_layout

\begin_layout Itemize

\series bold
Three of a Kind
\series default
 or a 
\series bold
Set
\series default
 beats Two Pairs, Pairs and High Cards and consists of three same-ranked
 cards, such as the Ace of Spades, Ace of Diamonds and Ace of Hearts, which
 would form Three of a Kind Aces
\end_layout

\begin_layout Itemize

\series bold
Straight
\series default
 is a hand where a player has 5 sequential cards, such as 4 of Diamonds,
 5 of Hearts, 6 of Hearts, 7 of Clubs, 8 of Spades, which would form a Straight
 8 High.
 The lowest ranked straight spans Ace to 5 and the highest ranked straight
 spans 10 to Ace.
 It is important to note that straights do not wrap around; you cannot form
 a straight such as Queen, King, Ace, Deuce, 3.
 
\end_layout

\begin_layout Itemize

\series bold
Flush
\series default
 is one of the stronger poker hands, consisting of cards which are all the
 same suit.
 For example the 6 of Hearts, 9 of Hearts, Jack of Hearts, Queen of Hearts
 and King of Hearts would form a King High Flush.
\end_layout

\begin_layout Itemize

\series bold
Full House
\series default
, sometimes known as a 
\series bold
Boat
\series default
, is one of the strongest poker hands available, and comprises both a Three
 of a Kind and an additional Pair.
 For example Three of a Kind Tens with Pair of Jacks would combine to form
 a Full House, Tens full of Jacks.
 
\end_layout

\begin_layout Itemize

\series bold
Four of a Kind
\series default
 is a hand obtained when a player has every instance of a particular card
 rank, such as King of Hearts, King of Diamonds, King of Clubs and King
 of Spades which would form Four of a Kind Kings.
 
\end_layout

\begin_layout Itemize

\series bold
Straight Flush
\series default
 is effectively the strongest poker hand possible, consisting of 5 sequential
 same suited cards.
 For example the 4 of Spades, 5 of Spades, 6 of Spades, 7 of Spades and
 8 of Spades would form a Straight Flush 8 High.
\end_layout

\begin_layout Itemize

\series bold
Royal Flush
\series default
 is a special instance of a Straight Flush where a player has the 10, Jack,
 Queen, King and Ace of a particular suit.
 Royal Flushes are particularly rare; in Texas Hold'Em the probability of
 getting a Royal Flush is approximately 0.000154%.
 
\end_layout

\begin_layout Subsection
Open Face Chinese Poker Terminology 
\end_layout

\begin_layout Itemize
A 
\series bold
row
\series default
 is a set structure for placing cards.
 At the end of a game when scoring occurs poker hands in each player's rows
 are compared to the opposing player's hand in their corresponding row.
 There are three different rows as described below
\end_layout

\begin_layout Itemize

\series bold
Bottom Row
\series default
 or 
\series bold
Back Hand
\series default
 is the foundation row, and consists of 5 cards.
 Out of all three rows this must have the strongest poker hand or the player
 fouls.
 
\end_layout

\begin_layout Itemize

\series bold
Middle Row 
\series default
or 
\series bold
Middle Hand 
\series default
also consists of 5 cards.
 It must have a weaker hand than Bottom Row in order for the player's hand
 to be valid.
 
\end_layout

\begin_layout Itemize

\series bold
Top Row
\series default
 or 
\series bold
Front Hand
\series default
 consists of 3 cards, meaning the best possible hand here is a Three of
 a Kind (in most variants 3 card straights and flushes do not count).
 Top Row must have a weaker hand than both middle and bottom row.
 
\end_layout

\begin_layout Itemize

\series bold
Scoop
\series default
 is a bonus awarded to a player when they win all 3 rows against an opponent.
 On top of the standard +1 point per row won, the player is granted an additiona
l bonus of +3 points which is also taken from their opponent.
\end_layout

\begin_layout Itemize

\series bold
Fouling
\series default
 occurs when a player plays an invalid hand, for example by putting a stronger
 hand in their middle row than their bottom row.
 When a player fouls any of their royalties are null, and their opponent
 is automatically awarded a scoop bonus so long as their hand is valid.
 
\end_layout

\begin_layout Itemize

\series bold
Kicker
\series default
 is the term used to describe the next card taken into account when comparing
 two otherwise equal hands.
 For example, if both Player 1 and Player 2 have a Pair of 8s then the rest
 of their cards would be considered, and whichever player has the highest
 rank wins.
 If both players kicker is equivalent then the next highest kicker will
 come into play and so on.
 
\end_layout

\begin_layout Itemize

\series bold
Royalties
\series default
 are bonus points awarded to player's for particularly strong hands.
 Just like any other points a player wins, they are taken directly from
 opposing players.
 Hands in higher rows score higher royalties than equivalent hands in lower
 rows.
 For example, a Full House in bottom row is worth 6 points in bottom or
 12 points in middle.
 Another example is that a Three of a Kind in bottom row scores no royalty,
 but gets 2 bonus points in middle and between 10 and 22 points in top depending
 on the rank (Three of a Kind Deuces scores 10 points up to Three of a Kind
 Aces with 22 points).
 See here for a full list of royalties: http://www.wsop.com/2013/Open_Face_Chinese
_Structure_Sheet.pdf 
\end_layout

\begin_layout Subsection
Computer Science and Mathematical Terminology 
\end_layout

\begin_layout Itemize

\series bold
Algorithms
\series default
 are precisely defined step-by-step instructions describing a set of operations
 to be performed
\end_layout

\begin_layout Itemize

\series bold
Artificial Intelligence 
\series default
is a field of study in Computer Science which focuses on simulating intelligent
 behaviour in computers.
\end_layout

\begin_layout Itemize

\series bold
Automated Planning and Scheduling 
\series default
is a branch of artificial intelligence which focuses on strategies and actions
 to be performed by Intelligent Agents or autonomous robots.
 Research into optimisations and improved heuristics is a key area of interest
 due to the potentially huge complexity of problems and solutions.
 
\end_layout

\begin_layout Itemize
The 
\series bold
Branching Factor
\series default
 is the average amount of branches from a node in a tree, indicating the
 tree's complexity.
 At a depth of 
\shape italic
d
\shape default
 with a branching factor of 
\shape italic
B
\shape default
 there would be approximately 
\begin_inset Formula $B^{d}$
\end_inset

 nodes.
\end_layout

\begin_layout Itemize

\series bold
Combinatorial Explosion
\series default
 is the phenomenon of exponential growth encountered in search problems.
 Deeper searches become increasingly complex multiplying by the branching
 factor at each level
\end_layout

\begin_layout Itemize
A 
\series bold
Game Tree
\series default
 represents possible states in a game, with each node representing a possible
 position and each edge representing a possible move
\end_layout

\begin_layout Itemize

\series bold
Game Theory
\series default
 is a branch of mathematics focused on determining optimal strategies and
 decisions in competitive situations
\end_layout

\begin_layout Itemize

\series bold
Heuristics
\series default
 are techniques used when classical approaches would fail or be prohibitively
 slow to complete.
 Heuristics use intelligent guesses to reduce the complexity of problems.
 For example in the context of a Chess game rather than trying to explore
 every single possible move and subsequent tree branch, a heuristic based
 approach would ignore branches starting with clearly bad moves
\end_layout

\begin_layout Itemize

\series bold
Hidden Information
\series default
 is relevant information available to one or more agents but not others.
 For example in a Poker game, the cards that players individually possess
 or have discarded are known to them but are hidden from other players.
\end_layout

\begin_layout Itemize
An 
\series bold
Intelligent Agent
\series default
 is an autonomous software entity that perceives and acts upon its environment,
 performing reasoning in order to solve problems and determine actions,
 exhibiting goal-oriented behaviour.
\end_layout

\begin_layout Itemize
The 
\series bold
Optimal Move
\series default
 or 
\series bold
Optimal Strategy
\series default
 is the move or strategy that will lead to the most favourable outcome for
 an Agent 
\end_layout

\begin_layout Itemize

\series bold
Perfect Information Games
\series default
 are games where at any stage all relevant information is available to an
 agent in order to inform its decision.
 In comparison in an 
\series bold
Imperfect Information Game
\series default
 certain information about the game state or prior actions are unknown.
\end_layout

\begin_layout Itemize

\series bold
Rule Based Systems
\series default
 store expert knowledge for a particular domain as a set of rules which
 can be used in various artificial intelligence applications.
 Rule Based Systems are used extensively for a wide range of purposes such
 as game playing, credit card authorisation and fraud detection.
\end_layout

\begin_layout Itemize

\series bold
Solved Games
\series default
 are games where the outcome (Win/Loss/Draw) can be predicted at any stage
 assuming optimal play by all players
\end_layout

\begin_layout Itemize
A 
\series bold
Zero-Sum Game
\series default
 is a game in which a player's gains are losses are balanced by another
 player's gains or losses.
 Open Face Chinese Poker is an example of a Zero-Sum Game as a player's
 gains are directly taken from their opponent.
 
\end_layout

\begin_layout Section
Bibliography
\end_layout

\begin_layout Itemize
Mandziuk, J., 2010, 
\shape italic
Knowledge-Free and Learning-Based Methods in Intelligent Game Playing
\shape default
, Springer-Verlag
\end_layout

\begin_layout Itemize
Shannon, C., 1950, 
\shape italic
Programming a Computer for Playing Chess
\shape default
, Philosophical Magazine, Ser .7, Vol.
 41, No.
 314
\end_layout

\begin_layout Itemize
Von Neumann, J, 1928, 
\shape italic
Zur Theorie der
\shape default
 
\shape italic
Gesellschaftsspiele,
\shape default
 Math.
 Annalen.
 100, 295-320
\end_layout

\begin_layout Itemize
Von Neumann, J.
 and Morgenstern, O., 1944
\shape italic
, Theory of Games and Economic Behavior
\shape default
, Princeton University Press
\end_layout

\begin_layout Itemize
Casti, J., 1996, 
\shape italic
Five golden rules: great theories of 20th-century mathematics – and why
 they matter
\shape default
, New York: Wiley-Interscience
\end_layout

\begin_layout Itemize
Kjeldsen, T., 2001, 
\shape italic
John von Neumann’s Conception of the Minimax Theorem: A Journey Through
 Different Mathematical Contexts,
\shape default
 Springer-Verlag
\end_layout

\begin_layout Itemize
Browne, C.
 Et al, 2012, 
\shape italic
A Survey of Monte Carlo Tree Search Methods
\shape default
, IEEE TRANSACTIONS ON COMPUTATIONAL INTELLIGENCE AND AI IN GAMES, VOL.
 4, NO.
 1.
\end_layout

\begin_layout Itemize
Cowling, P.
 Et al, 2012, 
\shape italic
Information Set Monte Carlo Tree Search
\shape default
, IEEE TRANSACTIONS ON COMPUTATIONAL INTELLIGENCE AND AI IN GAMES, VOL.
 4, NO.
 2.
\end_layout

\begin_layout Itemize
Whitehouse, D.
 Et al, 2013, 
\shape italic
Integrating Monte Carlo Tree Search with Knowledge-Based Methods to Create
 Engaging Play in a Commercial Mobile Game
\shape default
, University of York
\end_layout

\begin_layout Itemize
Nielsen, J., 1994, 
\shape italic
Usability Engineering
\shape default
, San Diego: Academic Press
\end_layout

\begin_layout Itemize
Özcan, E.
 and Hulagu, B., 2004, 
\shape italic
A Simple Intelligent Agent for Playing Abalone Game: ABLA
\shape default
, Proc.
 of the 13th Turkish Symposium on Artificial Intelligence and Neural Networks,
 pp.
 281-290
\end_layout

\begin_layout Itemize

\color blue
http://scrambledeggsontoast.github.io/2014/06/26/artificial-intelligence-ofcp/
\color inherit
 - Intelligent Agent ‘Kachushi’ for Open Face Chinese Poker using Monte
 Carlo methods, implemented in Haskell, accessed 2015
\end_layout

\begin_layout Itemize
Gerber, A.
 Et al, 2007, 
\shape italic
Implications of Rapid Development Methodologies
\shape default
, CSITEd 2007, p242-243
\end_layout

\end_body
\end_document
